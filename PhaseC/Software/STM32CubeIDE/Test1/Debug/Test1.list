
Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000584c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  080059d4  080059d4  000159d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059e8  080059e8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080059e8  080059e8  000159e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059f0  080059f0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059f0  080059f0  000159f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059f4  080059f4  000159f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080059f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000714  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200007a4  200007a4  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e31b  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029eb  00000000  00000000  0002e3db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a80  00000000  00000000  00030dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000948  00000000  00000000  00031848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000220da  00000000  00000000  00032190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000df6a  00000000  00000000  0005426a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c52b0  00000000  00000000  000621d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00127484  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b84  00000000  00000000  001274d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080059bc 	.word	0x080059bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080059bc 	.word	0x080059bc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
void MX_USB_HOST_Process(void);

int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  HAL_Init();
 80004d0:	f000 faa0 	bl	8000a14 <HAL_Init>

  SystemClock_Config();
 80004d4:	f000 f820 	bl	8000518 <SystemClock_Config>

  MX_GPIO_Init();
 80004d8:	f000 f888 	bl	80005ec <MX_GPIO_Init>
  MX_USB_HOST_Init();
 80004dc:	f004 fe7e 	bl	80051dc <MX_USB_HOST_Init>

  while (1)
  {
	HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 80004e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e4:	480b      	ldr	r0, [pc, #44]	; (8000514 <main+0x48>)
 80004e6:	f000 fdf2 	bl	80010ce <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 80004ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004ee:	4809      	ldr	r0, [pc, #36]	; (8000514 <main+0x48>)
 80004f0:	f000 fded 	bl	80010ce <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 80004f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004f8:	4806      	ldr	r0, [pc, #24]	; (8000514 <main+0x48>)
 80004fa:	f000 fde8 	bl	80010ce <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 80004fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000502:	4804      	ldr	r0, [pc, #16]	; (8000514 <main+0x48>)
 8000504:	f000 fde3 	bl	80010ce <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8000508:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800050c:	f000 faf4 	bl	8000af8 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8000510:	e7e6      	b.n	80004e0 <main+0x14>
 8000512:	bf00      	nop
 8000514:	40020c00 	.word	0x40020c00

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	; 0x50
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0320 	add.w	r3, r7, #32
 8000522:	2230      	movs	r2, #48	; 0x30
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f005 f942 	bl	80057b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <SystemClock_Config+0xcc>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	4a27      	ldr	r2, [pc, #156]	; (80005e4 <SystemClock_Config+0xcc>)
 8000546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054a:	6413      	str	r3, [r2, #64]	; 0x40
 800054c:	4b25      	ldr	r3, [pc, #148]	; (80005e4 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000558:	2300      	movs	r3, #0
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <SystemClock_Config+0xd0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <SystemClock_Config+0xd0>)
 8000562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000574:	2301      	movs	r3, #1
 8000576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000582:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000588:	2308      	movs	r3, #8
 800058a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800058c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000590:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000596:	2307      	movs	r3, #7
 8000598:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	4618      	mov	r0, r3
 80005a0:	f002 f99e 	bl	80028e0 <HAL_RCC_OscConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005aa:	f000 f95f 	bl	800086c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ae:	230f      	movs	r3, #15
 80005b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b2:	2302      	movs	r3, #2
 80005b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	2105      	movs	r1, #5
 80005cc:	4618      	mov	r0, r3
 80005ce:	f002 fbff 	bl	8002dd0 <HAL_RCC_ClockConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005d8:	f000 f948 	bl	800086c <Error_Handler>
  }
}
 80005dc:	bf00      	nop
 80005de:	3750      	adds	r7, #80	; 0x50
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08c      	sub	sp, #48	; 0x30
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	61bb      	str	r3, [r7, #24]
 8000606:	4b93      	ldr	r3, [pc, #588]	; (8000854 <MX_GPIO_Init+0x268>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a92      	ldr	r2, [pc, #584]	; (8000854 <MX_GPIO_Init+0x268>)
 800060c:	f043 0310 	orr.w	r3, r3, #16
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b90      	ldr	r3, [pc, #576]	; (8000854 <MX_GPIO_Init+0x268>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0310 	and.w	r3, r3, #16
 800061a:	61bb      	str	r3, [r7, #24]
 800061c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]
 8000622:	4b8c      	ldr	r3, [pc, #560]	; (8000854 <MX_GPIO_Init+0x268>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a8b      	ldr	r2, [pc, #556]	; (8000854 <MX_GPIO_Init+0x268>)
 8000628:	f043 0304 	orr.w	r3, r3, #4
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b89      	ldr	r3, [pc, #548]	; (8000854 <MX_GPIO_Init+0x268>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0304 	and.w	r3, r3, #4
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
 800063e:	4b85      	ldr	r3, [pc, #532]	; (8000854 <MX_GPIO_Init+0x268>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a84      	ldr	r2, [pc, #528]	; (8000854 <MX_GPIO_Init+0x268>)
 8000644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b82      	ldr	r3, [pc, #520]	; (8000854 <MX_GPIO_Init+0x268>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	4b7e      	ldr	r3, [pc, #504]	; (8000854 <MX_GPIO_Init+0x268>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a7d      	ldr	r2, [pc, #500]	; (8000854 <MX_GPIO_Init+0x268>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b7b      	ldr	r3, [pc, #492]	; (8000854 <MX_GPIO_Init+0x268>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	4b77      	ldr	r3, [pc, #476]	; (8000854 <MX_GPIO_Init+0x268>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a76      	ldr	r2, [pc, #472]	; (8000854 <MX_GPIO_Init+0x268>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b74      	ldr	r3, [pc, #464]	; (8000854 <MX_GPIO_Init+0x268>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	4b70      	ldr	r3, [pc, #448]	; (8000854 <MX_GPIO_Init+0x268>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a6f      	ldr	r2, [pc, #444]	; (8000854 <MX_GPIO_Init+0x268>)
 8000698:	f043 0308 	orr.w	r3, r3, #8
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b6d      	ldr	r3, [pc, #436]	; (8000854 <MX_GPIO_Init+0x268>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0308 	and.w	r3, r3, #8
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2108      	movs	r1, #8
 80006ae:	486a      	ldr	r0, [pc, #424]	; (8000858 <MX_GPIO_Init+0x26c>)
 80006b0:	f000 fcf4 	bl	800109c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	2101      	movs	r1, #1
 80006b8:	4868      	ldr	r0, [pc, #416]	; (800085c <MX_GPIO_Init+0x270>)
 80006ba:	f000 fcef 	bl	800109c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006be:	2200      	movs	r2, #0
 80006c0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80006c4:	4866      	ldr	r0, [pc, #408]	; (8000860 <MX_GPIO_Init+0x274>)
 80006c6:	f000 fce9 	bl	800109c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80006ca:	2308      	movs	r3, #8
 80006cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ce:	2301      	movs	r3, #1
 80006d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d6:	2300      	movs	r3, #0
 80006d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80006da:	f107 031c 	add.w	r3, r7, #28
 80006de:	4619      	mov	r1, r3
 80006e0:	485d      	ldr	r0, [pc, #372]	; (8000858 <MX_GPIO_Init+0x26c>)
 80006e2:	f000 fb3f 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80006e6:	2301      	movs	r3, #1
 80006e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	2301      	movs	r3, #1
 80006ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	2300      	movs	r3, #0
 80006f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	4619      	mov	r1, r3
 80006fc:	4857      	ldr	r0, [pc, #348]	; (800085c <MX_GPIO_Init+0x270>)
 80006fe:	f000 fb31 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000702:	2308      	movs	r3, #8
 8000704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000706:	2302      	movs	r3, #2
 8000708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070e:	2300      	movs	r3, #0
 8000710:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000712:	2305      	movs	r3, #5
 8000714:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	4619      	mov	r1, r3
 800071c:	484f      	ldr	r0, [pc, #316]	; (800085c <MX_GPIO_Init+0x270>)
 800071e:	f000 fb21 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000722:	2301      	movs	r3, #1
 8000724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000726:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800072a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	4619      	mov	r1, r3
 8000736:	484b      	ldr	r0, [pc, #300]	; (8000864 <MX_GPIO_Init+0x278>)
 8000738:	f000 fb14 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800073c:	2310      	movs	r3, #16
 800073e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000740:	2302      	movs	r3, #2
 8000742:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000748:	2300      	movs	r3, #0
 800074a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800074c:	2306      	movs	r3, #6
 800074e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	4619      	mov	r1, r3
 8000756:	4843      	ldr	r0, [pc, #268]	; (8000864 <MX_GPIO_Init+0x278>)
 8000758:	f000 fb04 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800075c:	23e0      	movs	r3, #224	; 0xe0
 800075e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	2302      	movs	r3, #2
 8000762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	2300      	movs	r3, #0
 800076a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800076c:	2305      	movs	r3, #5
 800076e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	4619      	mov	r1, r3
 8000776:	483b      	ldr	r0, [pc, #236]	; (8000864 <MX_GPIO_Init+0x278>)
 8000778:	f000 faf4 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800077c:	2304      	movs	r3, #4
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4619      	mov	r1, r3
 800078e:	4836      	ldr	r0, [pc, #216]	; (8000868 <MX_GPIO_Init+0x27c>)
 8000790:	f000 fae8 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007a6:	2305      	movs	r3, #5
 80007a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	4619      	mov	r1, r3
 80007b0:	482d      	ldr	r0, [pc, #180]	; (8000868 <MX_GPIO_Init+0x27c>)
 80007b2:	f000 fad7 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007b6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80007ba:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	2301      	movs	r3, #1
 80007be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4619      	mov	r1, r3
 80007ce:	4824      	ldr	r0, [pc, #144]	; (8000860 <MX_GPIO_Init+0x274>)
 80007d0:	f000 fac8 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80007d4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007e6:	2306      	movs	r3, #6
 80007e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4619      	mov	r1, r3
 80007f0:	481a      	ldr	r0, [pc, #104]	; (800085c <MX_GPIO_Init+0x270>)
 80007f2:	f000 fab7 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80007f6:	2320      	movs	r3, #32
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fa:	2300      	movs	r3, #0
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	4619      	mov	r1, r3
 8000808:	4815      	ldr	r0, [pc, #84]	; (8000860 <MX_GPIO_Init+0x274>)
 800080a:	f000 faab 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800080e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000814:	2312      	movs	r3, #18
 8000816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000818:	2301      	movs	r3, #1
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000820:	2304      	movs	r3, #4
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	480f      	ldr	r0, [pc, #60]	; (8000868 <MX_GPIO_Init+0x27c>)
 800082c:	f000 fa9a 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000830:	2302      	movs	r3, #2
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000834:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_GPIO_Init+0x26c>)
 8000846:	f000 fa8d 	bl	8000d64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800084a:	bf00      	nop
 800084c:	3730      	adds	r7, #48	; 0x30
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800
 8000858:	40021000 	.word	0x40021000
 800085c:	40020800 	.word	0x40020800
 8000860:	40020c00 	.word	0x40020c00
 8000864:	40020000 	.word	0x40020000
 8000868:	40020400 	.word	0x40020400

0800086c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000870:	b672      	cpsid	i
}
 8000872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000874:	e7fe      	b.n	8000874 <Error_Handler+0x8>
	...

08000878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <HAL_MspInit+0x4c>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000886:	4a0f      	ldr	r2, [pc, #60]	; (80008c4 <HAL_MspInit+0x4c>)
 8000888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088c:	6453      	str	r3, [r2, #68]	; 0x44
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <HAL_MspInit+0x4c>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <HAL_MspInit+0x4c>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	4a08      	ldr	r2, [pc, #32]	; (80008c4 <HAL_MspInit+0x4c>)
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a8:	6413      	str	r3, [r2, #64]	; 0x40
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_MspInit+0x4c>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008b6:	2007      	movs	r0, #7
 80008b8:	f000 fa12 	bl	8000ce0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800

080008c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <NMI_Handler+0x4>

080008ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <HardFault_Handler+0x4>

080008d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <MemManage_Handler+0x4>

080008da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <BusFault_Handler+0x4>

080008e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <UsageFault_Handler+0x4>

080008e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000914:	f000 f8d0 	bl	8000ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}

0800091c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000920:	4802      	ldr	r0, [pc, #8]	; (800092c <OTG_FS_IRQHandler+0x10>)
 8000922:	f000 fe59 	bl	80015d8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000490 	.word	0x20000490

08000930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000938:	4a14      	ldr	r2, [pc, #80]	; (800098c <_sbrk+0x5c>)
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <_sbrk+0x60>)
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000944:	4b13      	ldr	r3, [pc, #76]	; (8000994 <_sbrk+0x64>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d102      	bne.n	8000952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <_sbrk+0x64>)
 800094e:	4a12      	ldr	r2, [pc, #72]	; (8000998 <_sbrk+0x68>)
 8000950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <_sbrk+0x64>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4413      	add	r3, r2
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	429a      	cmp	r2, r3
 800095e:	d207      	bcs.n	8000970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000960:	f004 feec 	bl	800573c <__errno>
 8000964:	4603      	mov	r3, r0
 8000966:	220c      	movs	r2, #12
 8000968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800096a:	f04f 33ff 	mov.w	r3, #4294967295
 800096e:	e009      	b.n	8000984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <_sbrk+0x64>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000976:	4b07      	ldr	r3, [pc, #28]	; (8000994 <_sbrk+0x64>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	4a05      	ldr	r2, [pc, #20]	; (8000994 <_sbrk+0x64>)
 8000980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000982:	68fb      	ldr	r3, [r7, #12]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3718      	adds	r7, #24
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20020000 	.word	0x20020000
 8000990:	00000400 	.word	0x00000400
 8000994:	200000ac 	.word	0x200000ac
 8000998:	200007a8 	.word	0x200007a8

0800099c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <SystemInit+0x20>)
 80009a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a6:	4a05      	ldr	r2, [pc, #20]	; (80009bc <SystemInit+0x20>)
 80009a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009c4:	480d      	ldr	r0, [pc, #52]	; (80009fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009c6:	490e      	ldr	r1, [pc, #56]	; (8000a00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009c8:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009cc:	e002      	b.n	80009d4 <LoopCopyDataInit>

080009ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d2:	3304      	adds	r3, #4

080009d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d8:	d3f9      	bcc.n	80009ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009da:	4a0b      	ldr	r2, [pc, #44]	; (8000a08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009dc:	4c0b      	ldr	r4, [pc, #44]	; (8000a0c <LoopFillZerobss+0x26>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e0:	e001      	b.n	80009e6 <LoopFillZerobss>

080009e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e4:	3204      	adds	r2, #4

080009e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e8:	d3fb      	bcc.n	80009e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009ea:	f7ff ffd7 	bl	800099c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ee:	f004 feab 	bl	8005748 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009f2:	f7ff fd6b 	bl	80004cc <main>
  bx  lr    
 80009f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a00:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000a04:	080059f8 	.word	0x080059f8
  ldr r2, =_sbss
 8000a08:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000a0c:	200007a4 	.word	0x200007a4

08000a10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a10:	e7fe      	b.n	8000a10 <ADC_IRQHandler>
	...

08000a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a18:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <HAL_Init+0x40>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	; (8000a54 <HAL_Init+0x40>)
 8000a1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a24:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <HAL_Init+0x40>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <HAL_Init+0x40>)
 8000a2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <HAL_Init+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a07      	ldr	r2, [pc, #28]	; (8000a54 <HAL_Init+0x40>)
 8000a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a3c:	2003      	movs	r0, #3
 8000a3e:	f000 f94f 	bl	8000ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a42:	2000      	movs	r0, #0
 8000a44:	f000 f808 	bl	8000a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a48:	f7ff ff16 	bl	8000878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40023c00 	.word	0x40023c00

08000a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_InitTick+0x54>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <HAL_InitTick+0x58>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 f967 	bl	8000d4a <HAL_SYSTICK_Config>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	e00e      	b.n	8000aa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b0f      	cmp	r3, #15
 8000a8a:	d80a      	bhi.n	8000aa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	6879      	ldr	r1, [r7, #4]
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	f000 f92f 	bl	8000cf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a98:	4a06      	ldr	r2, [pc, #24]	; (8000ab4 <HAL_InitTick+0x5c>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e000      	b.n	8000aa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	20000004 	.word	0x20000004

08000ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_IncTick+0x20>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_IncTick+0x24>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	4a04      	ldr	r2, [pc, #16]	; (8000adc <HAL_IncTick+0x24>)
 8000aca:	6013      	str	r3, [r2, #0]
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	200000b0 	.word	0x200000b0

08000ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <HAL_GetTick+0x14>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	200000b0 	.word	0x200000b0

08000af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b00:	f7ff ffee 	bl	8000ae0 <HAL_GetTick>
 8000b04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b10:	d005      	beq.n	8000b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b12:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <HAL_Delay+0x44>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	461a      	mov	r2, r3
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b1e:	bf00      	nop
 8000b20:	f7ff ffde 	bl	8000ae0 <HAL_GetTick>
 8000b24:	4602      	mov	r2, r0
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d8f7      	bhi.n	8000b20 <HAL_Delay+0x28>
  {
  }
}
 8000b30:	bf00      	nop
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000008 	.word	0x20000008

08000b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b72:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	60d3      	str	r3, [r2, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b8c:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	0a1b      	lsrs	r3, r3, #8
 8000b92:	f003 0307 	and.w	r3, r3, #7
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	db0b      	blt.n	8000bce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	f003 021f 	and.w	r2, r3, #31
 8000bbc:	4907      	ldr	r1, [pc, #28]	; (8000bdc <__NVIC_EnableIRQ+0x38>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	095b      	lsrs	r3, r3, #5
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000e100 	.word	0xe000e100

08000be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db0a      	blt.n	8000c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	490c      	ldr	r1, [pc, #48]	; (8000c2c <__NVIC_SetPriority+0x4c>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	0112      	lsls	r2, r2, #4
 8000c00:	b2d2      	uxtb	r2, r2
 8000c02:	440b      	add	r3, r1
 8000c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c08:	e00a      	b.n	8000c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4908      	ldr	r1, [pc, #32]	; (8000c30 <__NVIC_SetPriority+0x50>)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	f003 030f 	and.w	r3, r3, #15
 8000c16:	3b04      	subs	r3, #4
 8000c18:	0112      	lsls	r2, r2, #4
 8000c1a:	b2d2      	uxtb	r2, r2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	761a      	strb	r2, [r3, #24]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000e100 	.word	0xe000e100
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b089      	sub	sp, #36	; 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f1c3 0307 	rsb	r3, r3, #7
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	bf28      	it	cs
 8000c52:	2304      	movcs	r3, #4
 8000c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	2b06      	cmp	r3, #6
 8000c5c:	d902      	bls.n	8000c64 <NVIC_EncodePriority+0x30>
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3b03      	subs	r3, #3
 8000c62:	e000      	b.n	8000c66 <NVIC_EncodePriority+0x32>
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43da      	mvns	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	401a      	ands	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa01 f303 	lsl.w	r3, r1, r3
 8000c86:	43d9      	mvns	r1, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	4313      	orrs	r3, r2
         );
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3724      	adds	r7, #36	; 0x24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cac:	d301      	bcc.n	8000cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e00f      	b.n	8000cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <SysTick_Config+0x40>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cba:	210f      	movs	r1, #15
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	f7ff ff8e 	bl	8000be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <SysTick_Config+0x40>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cca:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <SysTick_Config+0x40>)
 8000ccc:	2207      	movs	r2, #7
 8000cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	e000e010 	.word	0xe000e010

08000ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff ff29 	bl	8000b40 <__NVIC_SetPriorityGrouping>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b086      	sub	sp, #24
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
 8000d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d08:	f7ff ff3e 	bl	8000b88 <__NVIC_GetPriorityGrouping>
 8000d0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	68b9      	ldr	r1, [r7, #8]
 8000d12:	6978      	ldr	r0, [r7, #20]
 8000d14:	f7ff ff8e 	bl	8000c34 <NVIC_EncodePriority>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1e:	4611      	mov	r1, r2
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff5d 	bl	8000be0 <__NVIC_SetPriority>
}
 8000d26:	bf00      	nop
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	4603      	mov	r3, r0
 8000d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff31 	bl	8000ba4 <__NVIC_EnableIRQ>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff ffa2 	bl	8000c9c <SysTick_Config>
 8000d58:	4603      	mov	r3, r0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
 8000d7e:	e16b      	b.n	8001058 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d80:	2201      	movs	r2, #1
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	f040 815a 	bne.w	8001052 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d005      	beq.n	8000db6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d130      	bne.n	8000e18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	68da      	ldr	r2, [r3, #12]
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dec:	2201      	movs	r2, #1
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	091b      	lsrs	r3, r3, #4
 8000e02:	f003 0201 	and.w	r2, r3, #1
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	2b03      	cmp	r3, #3
 8000e22:	d017      	beq.n	8000e54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d123      	bne.n	8000ea8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	08da      	lsrs	r2, r3, #3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3208      	adds	r2, #8
 8000e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	f003 0307 	and.w	r3, r3, #7
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	220f      	movs	r2, #15
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	691a      	ldr	r2, [r3, #16]
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	08da      	lsrs	r2, r3, #3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3208      	adds	r2, #8
 8000ea2:	69b9      	ldr	r1, [r7, #24]
 8000ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 0203 	and.w	r2, r3, #3
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f000 80b4 	beq.w	8001052 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b60      	ldr	r3, [pc, #384]	; (8001070 <HAL_GPIO_Init+0x30c>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	4a5f      	ldr	r2, [pc, #380]	; (8001070 <HAL_GPIO_Init+0x30c>)
 8000ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8000efa:	4b5d      	ldr	r3, [pc, #372]	; (8001070 <HAL_GPIO_Init+0x30c>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f06:	4a5b      	ldr	r2, [pc, #364]	; (8001074 <HAL_GPIO_Init+0x310>)
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	220f      	movs	r2, #15
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4013      	ands	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a52      	ldr	r2, [pc, #328]	; (8001078 <HAL_GPIO_Init+0x314>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d02b      	beq.n	8000f8a <HAL_GPIO_Init+0x226>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a51      	ldr	r2, [pc, #324]	; (800107c <HAL_GPIO_Init+0x318>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d025      	beq.n	8000f86 <HAL_GPIO_Init+0x222>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a50      	ldr	r2, [pc, #320]	; (8001080 <HAL_GPIO_Init+0x31c>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d01f      	beq.n	8000f82 <HAL_GPIO_Init+0x21e>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4f      	ldr	r2, [pc, #316]	; (8001084 <HAL_GPIO_Init+0x320>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d019      	beq.n	8000f7e <HAL_GPIO_Init+0x21a>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4e      	ldr	r2, [pc, #312]	; (8001088 <HAL_GPIO_Init+0x324>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d013      	beq.n	8000f7a <HAL_GPIO_Init+0x216>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4d      	ldr	r2, [pc, #308]	; (800108c <HAL_GPIO_Init+0x328>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d00d      	beq.n	8000f76 <HAL_GPIO_Init+0x212>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4c      	ldr	r2, [pc, #304]	; (8001090 <HAL_GPIO_Init+0x32c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d007      	beq.n	8000f72 <HAL_GPIO_Init+0x20e>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4b      	ldr	r2, [pc, #300]	; (8001094 <HAL_GPIO_Init+0x330>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d101      	bne.n	8000f6e <HAL_GPIO_Init+0x20a>
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	e00e      	b.n	8000f8c <HAL_GPIO_Init+0x228>
 8000f6e:	2308      	movs	r3, #8
 8000f70:	e00c      	b.n	8000f8c <HAL_GPIO_Init+0x228>
 8000f72:	2306      	movs	r3, #6
 8000f74:	e00a      	b.n	8000f8c <HAL_GPIO_Init+0x228>
 8000f76:	2305      	movs	r3, #5
 8000f78:	e008      	b.n	8000f8c <HAL_GPIO_Init+0x228>
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	e006      	b.n	8000f8c <HAL_GPIO_Init+0x228>
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e004      	b.n	8000f8c <HAL_GPIO_Init+0x228>
 8000f82:	2302      	movs	r3, #2
 8000f84:	e002      	b.n	8000f8c <HAL_GPIO_Init+0x228>
 8000f86:	2301      	movs	r3, #1
 8000f88:	e000      	b.n	8000f8c <HAL_GPIO_Init+0x228>
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	69fa      	ldr	r2, [r7, #28]
 8000f8e:	f002 0203 	and.w	r2, r2, #3
 8000f92:	0092      	lsls	r2, r2, #2
 8000f94:	4093      	lsls	r3, r2
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f9c:	4935      	ldr	r1, [pc, #212]	; (8001074 <HAL_GPIO_Init+0x310>)
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	089b      	lsrs	r3, r3, #2
 8000fa2:	3302      	adds	r3, #2
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000faa:	4b3b      	ldr	r3, [pc, #236]	; (8001098 <HAL_GPIO_Init+0x334>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fce:	4a32      	ldr	r2, [pc, #200]	; (8001098 <HAL_GPIO_Init+0x334>)
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fd4:	4b30      	ldr	r3, [pc, #192]	; (8001098 <HAL_GPIO_Init+0x334>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ff8:	4a27      	ldr	r2, [pc, #156]	; (8001098 <HAL_GPIO_Init+0x334>)
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ffe:	4b26      	ldr	r3, [pc, #152]	; (8001098 <HAL_GPIO_Init+0x334>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001022:	4a1d      	ldr	r2, [pc, #116]	; (8001098 <HAL_GPIO_Init+0x334>)
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001028:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <HAL_GPIO_Init+0x334>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800104c:	4a12      	ldr	r2, [pc, #72]	; (8001098 <HAL_GPIO_Init+0x334>)
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3301      	adds	r3, #1
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	2b0f      	cmp	r3, #15
 800105c:	f67f ae90 	bls.w	8000d80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3724      	adds	r7, #36	; 0x24
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800
 8001074:	40013800 	.word	0x40013800
 8001078:	40020000 	.word	0x40020000
 800107c:	40020400 	.word	0x40020400
 8001080:	40020800 	.word	0x40020800
 8001084:	40020c00 	.word	0x40020c00
 8001088:	40021000 	.word	0x40021000
 800108c:	40021400 	.word	0x40021400
 8001090:	40021800 	.word	0x40021800
 8001094:	40021c00 	.word	0x40021c00
 8001098:	40013c00 	.word	0x40013c00

0800109c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	807b      	strh	r3, [r7, #2]
 80010a8:	4613      	mov	r3, r2
 80010aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010ac:	787b      	ldrb	r3, [r7, #1]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010b2:	887a      	ldrh	r2, [r7, #2]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010b8:	e003      	b.n	80010c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ba:	887b      	ldrh	r3, [r7, #2]
 80010bc:	041a      	lsls	r2, r3, #16
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	619a      	str	r2, [r3, #24]
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b085      	sub	sp, #20
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	460b      	mov	r3, r1
 80010d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010e0:	887a      	ldrh	r2, [r7, #2]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4013      	ands	r3, r2
 80010e6:	041a      	lsls	r2, r3, #16
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	43d9      	mvns	r1, r3
 80010ec:	887b      	ldrh	r3, [r7, #2]
 80010ee:	400b      	ands	r3, r1
 80010f0:	431a      	orrs	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	619a      	str	r2, [r3, #24]
}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001102:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001104:	b08f      	sub	sp, #60	; 0x3c
 8001106:	af0a      	add	r7, sp, #40	; 0x28
 8001108:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d101      	bne.n	8001114 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e054      	b.n	80011be <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	d106      	bne.n	8001134 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f004 f8a8 	bl	8005284 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2203      	movs	r2, #3
 8001138:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001144:	2b00      	cmp	r3, #0
 8001146:	d102      	bne.n	800114e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f002 f89a 	bl	800328c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	603b      	str	r3, [r7, #0]
 800115e:	687e      	ldr	r6, [r7, #4]
 8001160:	466d      	mov	r5, sp
 8001162:	f106 0410 	add.w	r4, r6, #16
 8001166:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001168:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800116a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800116c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800116e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001172:	e885 0003 	stmia.w	r5, {r0, r1}
 8001176:	1d33      	adds	r3, r6, #4
 8001178:	cb0e      	ldmia	r3, {r1, r2, r3}
 800117a:	6838      	ldr	r0, [r7, #0]
 800117c:	f002 f814 	bl	80031a8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2101      	movs	r1, #1
 8001186:	4618      	mov	r0, r3
 8001188:	f002 f891 	bl	80032ae <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	603b      	str	r3, [r7, #0]
 8001192:	687e      	ldr	r6, [r7, #4]
 8001194:	466d      	mov	r5, sp
 8001196:	f106 0410 	add.w	r4, r6, #16
 800119a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800119c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800119e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80011aa:	1d33      	adds	r3, r6, #4
 80011ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011ae:	6838      	ldr	r0, [r7, #0]
 80011b0:	f002 fa1a 	bl	80035e8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2201      	movs	r2, #1
 80011b8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011c6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80011c6:	b590      	push	{r4, r7, lr}
 80011c8:	b089      	sub	sp, #36	; 0x24
 80011ca:	af04      	add	r7, sp, #16
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	4608      	mov	r0, r1
 80011d0:	4611      	mov	r1, r2
 80011d2:	461a      	mov	r2, r3
 80011d4:	4603      	mov	r3, r0
 80011d6:	70fb      	strb	r3, [r7, #3]
 80011d8:	460b      	mov	r3, r1
 80011da:	70bb      	strb	r3, [r7, #2]
 80011dc:	4613      	mov	r3, r2
 80011de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d101      	bne.n	80011ee <HAL_HCD_HC_Init+0x28>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e076      	b.n	80012dc <HAL_HCD_HC_Init+0x116>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80011f6:	78fb      	ldrb	r3, [r7, #3]
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	212c      	movs	r1, #44	; 0x2c
 80011fc:	fb01 f303 	mul.w	r3, r1, r3
 8001200:	4413      	add	r3, r2
 8001202:	333d      	adds	r3, #61	; 0x3d
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	212c      	movs	r1, #44	; 0x2c
 800120e:	fb01 f303 	mul.w	r3, r1, r3
 8001212:	4413      	add	r3, r2
 8001214:	3338      	adds	r3, #56	; 0x38
 8001216:	787a      	ldrb	r2, [r7, #1]
 8001218:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800121a:	78fb      	ldrb	r3, [r7, #3]
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	212c      	movs	r1, #44	; 0x2c
 8001220:	fb01 f303 	mul.w	r3, r1, r3
 8001224:	4413      	add	r3, r2
 8001226:	3340      	adds	r3, #64	; 0x40
 8001228:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800122a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800122c:	78fb      	ldrb	r3, [r7, #3]
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	212c      	movs	r1, #44	; 0x2c
 8001232:	fb01 f303 	mul.w	r3, r1, r3
 8001236:	4413      	add	r3, r2
 8001238:	3339      	adds	r3, #57	; 0x39
 800123a:	78fa      	ldrb	r2, [r7, #3]
 800123c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800123e:	78fb      	ldrb	r3, [r7, #3]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	212c      	movs	r1, #44	; 0x2c
 8001244:	fb01 f303 	mul.w	r3, r1, r3
 8001248:	4413      	add	r3, r2
 800124a:	333f      	adds	r3, #63	; 0x3f
 800124c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001250:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001252:	78fb      	ldrb	r3, [r7, #3]
 8001254:	78ba      	ldrb	r2, [r7, #2]
 8001256:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800125a:	b2d0      	uxtb	r0, r2
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	212c      	movs	r1, #44	; 0x2c
 8001260:	fb01 f303 	mul.w	r3, r1, r3
 8001264:	4413      	add	r3, r2
 8001266:	333a      	adds	r3, #58	; 0x3a
 8001268:	4602      	mov	r2, r0
 800126a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800126c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001270:	2b00      	cmp	r3, #0
 8001272:	da09      	bge.n	8001288 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001274:	78fb      	ldrb	r3, [r7, #3]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	212c      	movs	r1, #44	; 0x2c
 800127a:	fb01 f303 	mul.w	r3, r1, r3
 800127e:	4413      	add	r3, r2
 8001280:	333b      	adds	r3, #59	; 0x3b
 8001282:	2201      	movs	r2, #1
 8001284:	701a      	strb	r2, [r3, #0]
 8001286:	e008      	b.n	800129a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	212c      	movs	r1, #44	; 0x2c
 800128e:	fb01 f303 	mul.w	r3, r1, r3
 8001292:	4413      	add	r3, r2
 8001294:	333b      	adds	r3, #59	; 0x3b
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800129a:	78fb      	ldrb	r3, [r7, #3]
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	212c      	movs	r1, #44	; 0x2c
 80012a0:	fb01 f303 	mul.w	r3, r1, r3
 80012a4:	4413      	add	r3, r2
 80012a6:	333c      	adds	r3, #60	; 0x3c
 80012a8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80012ac:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	787c      	ldrb	r4, [r7, #1]
 80012b4:	78ba      	ldrb	r2, [r7, #2]
 80012b6:	78f9      	ldrb	r1, [r7, #3]
 80012b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80012ba:	9302      	str	r3, [sp, #8]
 80012bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012c0:	9301      	str	r3, [sp, #4]
 80012c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	4623      	mov	r3, r4
 80012ca:	f002 fae9 	bl	80038a0 <USB_HC_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd90      	pop	{r4, r7, pc}

080012e4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d101      	bne.n	8001302 <HAL_HCD_HC_Halt+0x1e>
 80012fe:	2302      	movs	r3, #2
 8001300:	e00f      	b.n	8001322 <HAL_HCD_HC_Halt+0x3e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2201      	movs	r2, #1
 8001306:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	78fa      	ldrb	r2, [r7, #3]
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f002 fd39 	bl	8003d8a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001320:	7bfb      	ldrb	r3, [r7, #15]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	4608      	mov	r0, r1
 8001336:	4611      	mov	r1, r2
 8001338:	461a      	mov	r2, r3
 800133a:	4603      	mov	r3, r0
 800133c:	70fb      	strb	r3, [r7, #3]
 800133e:	460b      	mov	r3, r1
 8001340:	70bb      	strb	r3, [r7, #2]
 8001342:	4613      	mov	r3, r2
 8001344:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001346:	78fb      	ldrb	r3, [r7, #3]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	212c      	movs	r1, #44	; 0x2c
 800134c:	fb01 f303 	mul.w	r3, r1, r3
 8001350:	4413      	add	r3, r2
 8001352:	333b      	adds	r3, #59	; 0x3b
 8001354:	78ba      	ldrb	r2, [r7, #2]
 8001356:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001358:	78fb      	ldrb	r3, [r7, #3]
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	212c      	movs	r1, #44	; 0x2c
 800135e:	fb01 f303 	mul.w	r3, r1, r3
 8001362:	4413      	add	r3, r2
 8001364:	333f      	adds	r3, #63	; 0x3f
 8001366:	787a      	ldrb	r2, [r7, #1]
 8001368:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800136a:	7c3b      	ldrb	r3, [r7, #16]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d112      	bne.n	8001396 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001370:	78fb      	ldrb	r3, [r7, #3]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	212c      	movs	r1, #44	; 0x2c
 8001376:	fb01 f303 	mul.w	r3, r1, r3
 800137a:	4413      	add	r3, r2
 800137c:	3342      	adds	r3, #66	; 0x42
 800137e:	2203      	movs	r2, #3
 8001380:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001382:	78fb      	ldrb	r3, [r7, #3]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	212c      	movs	r1, #44	; 0x2c
 8001388:	fb01 f303 	mul.w	r3, r1, r3
 800138c:	4413      	add	r3, r2
 800138e:	333d      	adds	r3, #61	; 0x3d
 8001390:	7f3a      	ldrb	r2, [r7, #28]
 8001392:	701a      	strb	r2, [r3, #0]
 8001394:	e008      	b.n	80013a8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001396:	78fb      	ldrb	r3, [r7, #3]
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	212c      	movs	r1, #44	; 0x2c
 800139c:	fb01 f303 	mul.w	r3, r1, r3
 80013a0:	4413      	add	r3, r2
 80013a2:	3342      	adds	r3, #66	; 0x42
 80013a4:	2202      	movs	r2, #2
 80013a6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80013a8:	787b      	ldrb	r3, [r7, #1]
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	f200 80c6 	bhi.w	800153c <HAL_HCD_HC_SubmitRequest+0x210>
 80013b0:	a201      	add	r2, pc, #4	; (adr r2, 80013b8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80013b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b6:	bf00      	nop
 80013b8:	080013c9 	.word	0x080013c9
 80013bc:	08001529 	.word	0x08001529
 80013c0:	0800142d 	.word	0x0800142d
 80013c4:	080014ab 	.word	0x080014ab
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80013c8:	7c3b      	ldrb	r3, [r7, #16]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	f040 80b8 	bne.w	8001540 <HAL_HCD_HC_SubmitRequest+0x214>
 80013d0:	78bb      	ldrb	r3, [r7, #2]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f040 80b4 	bne.w	8001540 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80013d8:	8b3b      	ldrh	r3, [r7, #24]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d108      	bne.n	80013f0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80013de:	78fb      	ldrb	r3, [r7, #3]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	212c      	movs	r1, #44	; 0x2c
 80013e4:	fb01 f303 	mul.w	r3, r1, r3
 80013e8:	4413      	add	r3, r2
 80013ea:	3355      	adds	r3, #85	; 0x55
 80013ec:	2201      	movs	r2, #1
 80013ee:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80013f0:	78fb      	ldrb	r3, [r7, #3]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	212c      	movs	r1, #44	; 0x2c
 80013f6:	fb01 f303 	mul.w	r3, r1, r3
 80013fa:	4413      	add	r3, r2
 80013fc:	3355      	adds	r3, #85	; 0x55
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d109      	bne.n	8001418 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001404:	78fb      	ldrb	r3, [r7, #3]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	212c      	movs	r1, #44	; 0x2c
 800140a:	fb01 f303 	mul.w	r3, r1, r3
 800140e:	4413      	add	r3, r2
 8001410:	3342      	adds	r3, #66	; 0x42
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001416:	e093      	b.n	8001540 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001418:	78fb      	ldrb	r3, [r7, #3]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	212c      	movs	r1, #44	; 0x2c
 800141e:	fb01 f303 	mul.w	r3, r1, r3
 8001422:	4413      	add	r3, r2
 8001424:	3342      	adds	r3, #66	; 0x42
 8001426:	2202      	movs	r2, #2
 8001428:	701a      	strb	r2, [r3, #0]
      break;
 800142a:	e089      	b.n	8001540 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800142c:	78bb      	ldrb	r3, [r7, #2]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d11d      	bne.n	800146e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001432:	78fb      	ldrb	r3, [r7, #3]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	212c      	movs	r1, #44	; 0x2c
 8001438:	fb01 f303 	mul.w	r3, r1, r3
 800143c:	4413      	add	r3, r2
 800143e:	3355      	adds	r3, #85	; 0x55
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d109      	bne.n	800145a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001446:	78fb      	ldrb	r3, [r7, #3]
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	212c      	movs	r1, #44	; 0x2c
 800144c:	fb01 f303 	mul.w	r3, r1, r3
 8001450:	4413      	add	r3, r2
 8001452:	3342      	adds	r3, #66	; 0x42
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001458:	e073      	b.n	8001542 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800145a:	78fb      	ldrb	r3, [r7, #3]
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	212c      	movs	r1, #44	; 0x2c
 8001460:	fb01 f303 	mul.w	r3, r1, r3
 8001464:	4413      	add	r3, r2
 8001466:	3342      	adds	r3, #66	; 0x42
 8001468:	2202      	movs	r2, #2
 800146a:	701a      	strb	r2, [r3, #0]
      break;
 800146c:	e069      	b.n	8001542 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800146e:	78fb      	ldrb	r3, [r7, #3]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	212c      	movs	r1, #44	; 0x2c
 8001474:	fb01 f303 	mul.w	r3, r1, r3
 8001478:	4413      	add	r3, r2
 800147a:	3354      	adds	r3, #84	; 0x54
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d109      	bne.n	8001496 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001482:	78fb      	ldrb	r3, [r7, #3]
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	212c      	movs	r1, #44	; 0x2c
 8001488:	fb01 f303 	mul.w	r3, r1, r3
 800148c:	4413      	add	r3, r2
 800148e:	3342      	adds	r3, #66	; 0x42
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
      break;
 8001494:	e055      	b.n	8001542 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001496:	78fb      	ldrb	r3, [r7, #3]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	212c      	movs	r1, #44	; 0x2c
 800149c:	fb01 f303 	mul.w	r3, r1, r3
 80014a0:	4413      	add	r3, r2
 80014a2:	3342      	adds	r3, #66	; 0x42
 80014a4:	2202      	movs	r2, #2
 80014a6:	701a      	strb	r2, [r3, #0]
      break;
 80014a8:	e04b      	b.n	8001542 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80014aa:	78bb      	ldrb	r3, [r7, #2]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d11d      	bne.n	80014ec <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80014b0:	78fb      	ldrb	r3, [r7, #3]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	212c      	movs	r1, #44	; 0x2c
 80014b6:	fb01 f303 	mul.w	r3, r1, r3
 80014ba:	4413      	add	r3, r2
 80014bc:	3355      	adds	r3, #85	; 0x55
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d109      	bne.n	80014d8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80014c4:	78fb      	ldrb	r3, [r7, #3]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	212c      	movs	r1, #44	; 0x2c
 80014ca:	fb01 f303 	mul.w	r3, r1, r3
 80014ce:	4413      	add	r3, r2
 80014d0:	3342      	adds	r3, #66	; 0x42
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80014d6:	e034      	b.n	8001542 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80014d8:	78fb      	ldrb	r3, [r7, #3]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	212c      	movs	r1, #44	; 0x2c
 80014de:	fb01 f303 	mul.w	r3, r1, r3
 80014e2:	4413      	add	r3, r2
 80014e4:	3342      	adds	r3, #66	; 0x42
 80014e6:	2202      	movs	r2, #2
 80014e8:	701a      	strb	r2, [r3, #0]
      break;
 80014ea:	e02a      	b.n	8001542 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80014ec:	78fb      	ldrb	r3, [r7, #3]
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	212c      	movs	r1, #44	; 0x2c
 80014f2:	fb01 f303 	mul.w	r3, r1, r3
 80014f6:	4413      	add	r3, r2
 80014f8:	3354      	adds	r3, #84	; 0x54
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d109      	bne.n	8001514 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	212c      	movs	r1, #44	; 0x2c
 8001506:	fb01 f303 	mul.w	r3, r1, r3
 800150a:	4413      	add	r3, r2
 800150c:	3342      	adds	r3, #66	; 0x42
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
      break;
 8001512:	e016      	b.n	8001542 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001514:	78fb      	ldrb	r3, [r7, #3]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	212c      	movs	r1, #44	; 0x2c
 800151a:	fb01 f303 	mul.w	r3, r1, r3
 800151e:	4413      	add	r3, r2
 8001520:	3342      	adds	r3, #66	; 0x42
 8001522:	2202      	movs	r2, #2
 8001524:	701a      	strb	r2, [r3, #0]
      break;
 8001526:	e00c      	b.n	8001542 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001528:	78fb      	ldrb	r3, [r7, #3]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	212c      	movs	r1, #44	; 0x2c
 800152e:	fb01 f303 	mul.w	r3, r1, r3
 8001532:	4413      	add	r3, r2
 8001534:	3342      	adds	r3, #66	; 0x42
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
      break;
 800153a:	e002      	b.n	8001542 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800153c:	bf00      	nop
 800153e:	e000      	b.n	8001542 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001540:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	212c      	movs	r1, #44	; 0x2c
 8001548:	fb01 f303 	mul.w	r3, r1, r3
 800154c:	4413      	add	r3, r2
 800154e:	3344      	adds	r3, #68	; 0x44
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	8b3a      	ldrh	r2, [r7, #24]
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	202c      	movs	r0, #44	; 0x2c
 800155c:	fb00 f303 	mul.w	r3, r0, r3
 8001560:	440b      	add	r3, r1
 8001562:	334c      	adds	r3, #76	; 0x4c
 8001564:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001566:	78fb      	ldrb	r3, [r7, #3]
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	212c      	movs	r1, #44	; 0x2c
 800156c:	fb01 f303 	mul.w	r3, r1, r3
 8001570:	4413      	add	r3, r2
 8001572:	3360      	adds	r3, #96	; 0x60
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001578:	78fb      	ldrb	r3, [r7, #3]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	212c      	movs	r1, #44	; 0x2c
 800157e:	fb01 f303 	mul.w	r3, r1, r3
 8001582:	4413      	add	r3, r2
 8001584:	3350      	adds	r3, #80	; 0x50
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800158a:	78fb      	ldrb	r3, [r7, #3]
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	212c      	movs	r1, #44	; 0x2c
 8001590:	fb01 f303 	mul.w	r3, r1, r3
 8001594:	4413      	add	r3, r2
 8001596:	3339      	adds	r3, #57	; 0x39
 8001598:	78fa      	ldrb	r2, [r7, #3]
 800159a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800159c:	78fb      	ldrb	r3, [r7, #3]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	212c      	movs	r1, #44	; 0x2c
 80015a2:	fb01 f303 	mul.w	r3, r1, r3
 80015a6:	4413      	add	r3, r2
 80015a8:	3361      	adds	r3, #97	; 0x61
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6818      	ldr	r0, [r3, #0]
 80015b2:	78fb      	ldrb	r3, [r7, #3]
 80015b4:	222c      	movs	r2, #44	; 0x2c
 80015b6:	fb02 f303 	mul.w	r3, r2, r3
 80015ba:	3338      	adds	r3, #56	; 0x38
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	18d1      	adds	r1, r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	461a      	mov	r2, r3
 80015c8:	f002 fa8c 	bl	8003ae4 <USB_HC_StartXfer>
 80015cc:	4603      	mov	r3, r0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop

080015d8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f001 ffb7 	bl	8003562 <USB_GetMode>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	f040 80f6 	bne.w	80017e8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f001 ff9b 	bl	800353c <USB_ReadInterrupts>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	f000 80ec 	beq.w	80017e6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f001 ff92 	bl	800353c <USB_ReadInterrupts>
 8001618:	4603      	mov	r3, r0
 800161a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800161e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001622:	d104      	bne.n	800162e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800162c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f001 ff82 	bl	800353c <USB_ReadInterrupts>
 8001638:	4603      	mov	r3, r0
 800163a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800163e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001642:	d104      	bne.n	800164e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800164c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f001 ff72 	bl	800353c <USB_ReadInterrupts>
 8001658:	4603      	mov	r3, r0
 800165a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800165e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001662:	d104      	bne.n	800166e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800166c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f001 ff62 	bl	800353c <USB_ReadInterrupts>
 8001678:	4603      	mov	r3, r0
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b02      	cmp	r3, #2
 8001680:	d103      	bne.n	800168a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2202      	movs	r2, #2
 8001688:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f001 ff54 	bl	800353c <USB_ReadInterrupts>
 8001694:	4603      	mov	r3, r0
 8001696:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800169a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800169e:	d11c      	bne.n	80016da <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80016a8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10f      	bne.n	80016da <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80016ba:	2110      	movs	r1, #16
 80016bc:	6938      	ldr	r0, [r7, #16]
 80016be:	f001 fe43 	bl	8003348 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80016c2:	6938      	ldr	r0, [r7, #16]
 80016c4:	f001 fe74 	bl	80033b0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2101      	movs	r1, #1
 80016ce:	4618      	mov	r0, r3
 80016d0:	f002 f84a 	bl	8003768 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f003 fe53 	bl	8005380 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f001 ff2c 	bl	800353c <USB_ReadInterrupts>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016ee:	d102      	bne.n	80016f6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f001 f882 	bl	80027fa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f001 ff1e 	bl	800353c <USB_ReadInterrupts>
 8001700:	4603      	mov	r3, r0
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b08      	cmp	r3, #8
 8001708:	d106      	bne.n	8001718 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f003 fe1c 	bl	8005348 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2208      	movs	r2, #8
 8001716:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f001 ff0d 	bl	800353c <USB_ReadInterrupts>
 8001722:	4603      	mov	r3, r0
 8001724:	f003 0310 	and.w	r3, r3, #16
 8001728:	2b10      	cmp	r3, #16
 800172a:	d101      	bne.n	8001730 <HAL_HCD_IRQHandler+0x158>
 800172c:	2301      	movs	r3, #1
 800172e:	e000      	b.n	8001732 <HAL_HCD_IRQHandler+0x15a>
 8001730:	2300      	movs	r3, #0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d012      	beq.n	800175c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	699a      	ldr	r2, [r3, #24]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0210 	bic.w	r2, r2, #16
 8001744:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 ff85 	bl	8002656 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	699a      	ldr	r2, [r3, #24]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0210 	orr.w	r2, r2, #16
 800175a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f001 feeb 	bl	800353c <USB_ReadInterrupts>
 8001766:	4603      	mov	r3, r0
 8001768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001770:	d13a      	bne.n	80017e8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f002 faf6 	bl	8003d68 <USB_HC_ReadInterrupt>
 800177c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	e025      	b.n	80017d0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	fa22 f303 	lsr.w	r3, r2, r3
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b00      	cmp	r3, #0
 8001796:	d018      	beq.n	80017ca <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	015a      	lsls	r2, r3, #5
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4413      	add	r3, r2
 80017a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017ae:	d106      	bne.n	80017be <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	4619      	mov	r1, r3
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f88f 	bl	80018da <HCD_HC_IN_IRQHandler>
 80017bc:	e005      	b.n	80017ca <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	4619      	mov	r1, r3
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 fbdd 	bl	8001f84 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	3301      	adds	r3, #1
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d3d4      	bcc.n	8001784 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017e2:	615a      	str	r2, [r3, #20]
 80017e4:	e000      	b.n	80017e8 <HAL_HCD_IRQHandler+0x210>
      return;
 80017e6:	bf00      	nop
    }
  }
}
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <HAL_HCD_Start+0x16>
 8001800:	2302      	movs	r3, #2
 8001802:	e013      	b.n	800182c <HAL_HCD_Start+0x3e>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2101      	movs	r1, #1
 8001812:	4618      	mov	r0, r3
 8001814:	f001 ffe2 	bl	80037dc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f001 fd24 	bl	800326a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001842:	2b01      	cmp	r3, #1
 8001844:	d101      	bne.n	800184a <HAL_HCD_Stop+0x16>
 8001846:	2302      	movs	r3, #2
 8001848:	e00d      	b.n	8001866 <HAL_HCD_Stop+0x32>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f002 fbd0 	bl	8003ffc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	460b      	mov	r3, r1
 8001878:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800187a:	78fb      	ldrb	r3, [r7, #3]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	212c      	movs	r1, #44	; 0x2c
 8001880:	fb01 f303 	mul.w	r3, r1, r3
 8001884:	4413      	add	r3, r2
 8001886:	3360      	adds	r3, #96	; 0x60
 8001888:	781b      	ldrb	r3, [r3, #0]
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	460b      	mov	r3, r1
 80018a0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	212c      	movs	r1, #44	; 0x2c
 80018a8:	fb01 f303 	mul.w	r3, r1, r3
 80018ac:	4413      	add	r3, r2
 80018ae:	3350      	adds	r3, #80	; 0x50
 80018b0:	681b      	ldr	r3, [r3, #0]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f001 ffd6 	bl	800387c <USB_GetCurrentFrame>
 80018d0:	4603      	mov	r3, r0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b086      	sub	sp, #24
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	460b      	mov	r3, r1
 80018e4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	015a      	lsls	r2, r3, #5
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	4413      	add	r3, r2
 80018fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	2b04      	cmp	r3, #4
 8001908:	d11a      	bne.n	8001940 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	015a      	lsls	r2, r3, #5
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	4413      	add	r3, r2
 8001912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001916:	461a      	mov	r2, r3
 8001918:	2304      	movs	r3, #4
 800191a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	212c      	movs	r1, #44	; 0x2c
 8001922:	fb01 f303 	mul.w	r3, r1, r3
 8001926:	4413      	add	r3, r2
 8001928:	3361      	adds	r3, #97	; 0x61
 800192a:	2206      	movs	r2, #6
 800192c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f002 fa26 	bl	8003d8a <USB_HC_Halt>
 800193e:	e0af      	b.n	8001aa0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	015a      	lsls	r2, r3, #5
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4413      	add	r3, r2
 8001948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001956:	d11b      	bne.n	8001990 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	015a      	lsls	r2, r3, #5
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	4413      	add	r3, r2
 8001960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001964:	461a      	mov	r2, r3
 8001966:	f44f 7380 	mov.w	r3, #256	; 0x100
 800196a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	212c      	movs	r1, #44	; 0x2c
 8001972:	fb01 f303 	mul.w	r3, r1, r3
 8001976:	4413      	add	r3, r2
 8001978:	3361      	adds	r3, #97	; 0x61
 800197a:	2207      	movs	r2, #7
 800197c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f002 f9fe 	bl	8003d8a <USB_HC_Halt>
 800198e:	e087      	b.n	8001aa0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	015a      	lsls	r2, r3, #5
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	4413      	add	r3, r2
 8001998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 0320 	and.w	r3, r3, #32
 80019a2:	2b20      	cmp	r3, #32
 80019a4:	d109      	bne.n	80019ba <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	015a      	lsls	r2, r3, #5
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	4413      	add	r3, r2
 80019ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019b2:	461a      	mov	r2, r3
 80019b4:	2320      	movs	r3, #32
 80019b6:	6093      	str	r3, [r2, #8]
 80019b8:	e072      	b.n	8001aa0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	015a      	lsls	r2, r3, #5
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4413      	add	r3, r2
 80019c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 0308 	and.w	r3, r3, #8
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	d11a      	bne.n	8001a06 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	015a      	lsls	r2, r3, #5
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	4413      	add	r3, r2
 80019d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019dc:	461a      	mov	r2, r3
 80019de:	2308      	movs	r3, #8
 80019e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	212c      	movs	r1, #44	; 0x2c
 80019e8:	fb01 f303 	mul.w	r3, r1, r3
 80019ec:	4413      	add	r3, r2
 80019ee:	3361      	adds	r3, #97	; 0x61
 80019f0:	2205      	movs	r2, #5
 80019f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	4611      	mov	r1, r2
 80019fe:	4618      	mov	r0, r3
 8001a00:	f002 f9c3 	bl	8003d8a <USB_HC_Halt>
 8001a04:	e04c      	b.n	8001aa0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	015a      	lsls	r2, r3, #5
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a1c:	d11b      	bne.n	8001a56 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	015a      	lsls	r2, r3, #5
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	4413      	add	r3, r2
 8001a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a30:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	212c      	movs	r1, #44	; 0x2c
 8001a38:	fb01 f303 	mul.w	r3, r1, r3
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3361      	adds	r3, #97	; 0x61
 8001a40:	2208      	movs	r2, #8
 8001a42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	4611      	mov	r1, r2
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f002 f99b 	bl	8003d8a <USB_HC_Halt>
 8001a54:	e024      	b.n	8001aa0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	015a      	lsls	r2, r3, #5
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a68:	2b80      	cmp	r3, #128	; 0x80
 8001a6a:	d119      	bne.n	8001aa0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	015a      	lsls	r2, r3, #5
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	4413      	add	r3, r2
 8001a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a78:	461a      	mov	r2, r3
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	212c      	movs	r1, #44	; 0x2c
 8001a84:	fb01 f303 	mul.w	r3, r1, r3
 8001a88:	4413      	add	r3, r2
 8001a8a:	3361      	adds	r3, #97	; 0x61
 8001a8c:	2206      	movs	r2, #6
 8001a8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	4611      	mov	r1, r2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f002 f975 	bl	8003d8a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	015a      	lsls	r2, r3, #5
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ab2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ab6:	d112      	bne.n	8001ade <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	4611      	mov	r1, r2
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f002 f961 	bl	8003d8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	015a      	lsls	r2, r3, #5
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	4413      	add	r3, r2
 8001ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ada:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001adc:	e24e      	b.n	8001f7c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	015a      	lsls	r2, r3, #5
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	f040 80df 	bne.w	8001cb4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d019      	beq.n	8001b32 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	212c      	movs	r1, #44	; 0x2c
 8001b04:	fb01 f303 	mul.w	r3, r1, r3
 8001b08:	4413      	add	r3, r2
 8001b0a:	3348      	adds	r3, #72	; 0x48
 8001b0c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	0159      	lsls	r1, r3, #5
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	440b      	add	r3, r1
 8001b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001b20:	1ad2      	subs	r2, r2, r3
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	202c      	movs	r0, #44	; 0x2c
 8001b28:	fb00 f303 	mul.w	r3, r0, r3
 8001b2c:	440b      	add	r3, r1
 8001b2e:	3350      	adds	r3, #80	; 0x50
 8001b30:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	212c      	movs	r1, #44	; 0x2c
 8001b38:	fb01 f303 	mul.w	r3, r1, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3361      	adds	r3, #97	; 0x61
 8001b40:	2201      	movs	r2, #1
 8001b42:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	212c      	movs	r1, #44	; 0x2c
 8001b4a:	fb01 f303 	mul.w	r3, r1, r3
 8001b4e:	4413      	add	r3, r2
 8001b50:	335c      	adds	r3, #92	; 0x5c
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	015a      	lsls	r2, r3, #5
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b62:	461a      	mov	r2, r3
 8001b64:	2301      	movs	r3, #1
 8001b66:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	212c      	movs	r1, #44	; 0x2c
 8001b6e:	fb01 f303 	mul.w	r3, r1, r3
 8001b72:	4413      	add	r3, r2
 8001b74:	333f      	adds	r3, #63	; 0x3f
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d009      	beq.n	8001b90 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	212c      	movs	r1, #44	; 0x2c
 8001b82:	fb01 f303 	mul.w	r3, r1, r3
 8001b86:	4413      	add	r3, r2
 8001b88:	333f      	adds	r3, #63	; 0x3f
 8001b8a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d111      	bne.n	8001bb4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	4611      	mov	r1, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f002 f8f5 	bl	8003d8a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	015a      	lsls	r2, r3, #5
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bac:	461a      	mov	r2, r3
 8001bae:	2310      	movs	r3, #16
 8001bb0:	6093      	str	r3, [r2, #8]
 8001bb2:	e03a      	b.n	8001c2a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	212c      	movs	r1, #44	; 0x2c
 8001bba:	fb01 f303 	mul.w	r3, r1, r3
 8001bbe:	4413      	add	r3, r2
 8001bc0:	333f      	adds	r3, #63	; 0x3f
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d009      	beq.n	8001bdc <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	212c      	movs	r1, #44	; 0x2c
 8001bce:	fb01 f303 	mul.w	r3, r1, r3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	333f      	adds	r3, #63	; 0x3f
 8001bd6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d126      	bne.n	8001c2a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	015a      	lsls	r2, r3, #5
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4413      	add	r3, r2
 8001be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	0151      	lsls	r1, r2, #5
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	440a      	add	r2, r1
 8001bf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bf6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001bfa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	212c      	movs	r1, #44	; 0x2c
 8001c02:	fb01 f303 	mul.w	r3, r1, r3
 8001c06:	4413      	add	r3, r2
 8001c08:	3360      	adds	r3, #96	; 0x60
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	b2d9      	uxtb	r1, r3
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	202c      	movs	r0, #44	; 0x2c
 8001c18:	fb00 f303 	mul.w	r3, r0, r3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3360      	adds	r3, #96	; 0x60
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f003 fbb9 	bl	800539c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d12b      	bne.n	8001c8a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	212c      	movs	r1, #44	; 0x2c
 8001c38:	fb01 f303 	mul.w	r3, r1, r3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3348      	adds	r3, #72	; 0x48
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	202c      	movs	r0, #44	; 0x2c
 8001c48:	fb00 f202 	mul.w	r2, r0, r2
 8001c4c:	440a      	add	r2, r1
 8001c4e:	3240      	adds	r2, #64	; 0x40
 8001c50:	8812      	ldrh	r2, [r2, #0]
 8001c52:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 818e 	beq.w	8001f7c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	212c      	movs	r1, #44	; 0x2c
 8001c66:	fb01 f303 	mul.w	r3, r1, r3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3354      	adds	r3, #84	; 0x54
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	f083 0301 	eor.w	r3, r3, #1
 8001c74:	b2d8      	uxtb	r0, r3
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	212c      	movs	r1, #44	; 0x2c
 8001c7c:	fb01 f303 	mul.w	r3, r1, r3
 8001c80:	4413      	add	r3, r2
 8001c82:	3354      	adds	r3, #84	; 0x54
 8001c84:	4602      	mov	r2, r0
 8001c86:	701a      	strb	r2, [r3, #0]
}
 8001c88:	e178      	b.n	8001f7c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	212c      	movs	r1, #44	; 0x2c
 8001c90:	fb01 f303 	mul.w	r3, r1, r3
 8001c94:	4413      	add	r3, r2
 8001c96:	3354      	adds	r3, #84	; 0x54
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	f083 0301 	eor.w	r3, r3, #1
 8001c9e:	b2d8      	uxtb	r0, r3
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	212c      	movs	r1, #44	; 0x2c
 8001ca6:	fb01 f303 	mul.w	r3, r1, r3
 8001caa:	4413      	add	r3, r2
 8001cac:	3354      	adds	r3, #84	; 0x54
 8001cae:	4602      	mov	r2, r0
 8001cb0:	701a      	strb	r2, [r3, #0]
}
 8001cb2:	e163      	b.n	8001f7c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	015a      	lsls	r2, r3, #5
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4413      	add	r3, r2
 8001cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	f040 80f6 	bne.w	8001eb8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	212c      	movs	r1, #44	; 0x2c
 8001cd2:	fb01 f303 	mul.w	r3, r1, r3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3361      	adds	r3, #97	; 0x61
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d109      	bne.n	8001cf4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	212c      	movs	r1, #44	; 0x2c
 8001ce6:	fb01 f303 	mul.w	r3, r1, r3
 8001cea:	4413      	add	r3, r2
 8001cec:	3360      	adds	r3, #96	; 0x60
 8001cee:	2201      	movs	r2, #1
 8001cf0:	701a      	strb	r2, [r3, #0]
 8001cf2:	e0c9      	b.n	8001e88 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	212c      	movs	r1, #44	; 0x2c
 8001cfa:	fb01 f303 	mul.w	r3, r1, r3
 8001cfe:	4413      	add	r3, r2
 8001d00:	3361      	adds	r3, #97	; 0x61
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b05      	cmp	r3, #5
 8001d06:	d109      	bne.n	8001d1c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	212c      	movs	r1, #44	; 0x2c
 8001d0e:	fb01 f303 	mul.w	r3, r1, r3
 8001d12:	4413      	add	r3, r2
 8001d14:	3360      	adds	r3, #96	; 0x60
 8001d16:	2205      	movs	r2, #5
 8001d18:	701a      	strb	r2, [r3, #0]
 8001d1a:	e0b5      	b.n	8001e88 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	212c      	movs	r1, #44	; 0x2c
 8001d22:	fb01 f303 	mul.w	r3, r1, r3
 8001d26:	4413      	add	r3, r2
 8001d28:	3361      	adds	r3, #97	; 0x61
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b06      	cmp	r3, #6
 8001d2e:	d009      	beq.n	8001d44 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	212c      	movs	r1, #44	; 0x2c
 8001d36:	fb01 f303 	mul.w	r3, r1, r3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3361      	adds	r3, #97	; 0x61
 8001d3e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d150      	bne.n	8001de6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	212c      	movs	r1, #44	; 0x2c
 8001d4a:	fb01 f303 	mul.w	r3, r1, r3
 8001d4e:	4413      	add	r3, r2
 8001d50:	335c      	adds	r3, #92	; 0x5c
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	202c      	movs	r0, #44	; 0x2c
 8001d5c:	fb00 f303 	mul.w	r3, r0, r3
 8001d60:	440b      	add	r3, r1
 8001d62:	335c      	adds	r3, #92	; 0x5c
 8001d64:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	212c      	movs	r1, #44	; 0x2c
 8001d6c:	fb01 f303 	mul.w	r3, r1, r3
 8001d70:	4413      	add	r3, r2
 8001d72:	335c      	adds	r3, #92	; 0x5c
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d912      	bls.n	8001da0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	212c      	movs	r1, #44	; 0x2c
 8001d80:	fb01 f303 	mul.w	r3, r1, r3
 8001d84:	4413      	add	r3, r2
 8001d86:	335c      	adds	r3, #92	; 0x5c
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	212c      	movs	r1, #44	; 0x2c
 8001d92:	fb01 f303 	mul.w	r3, r1, r3
 8001d96:	4413      	add	r3, r2
 8001d98:	3360      	adds	r3, #96	; 0x60
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001d9e:	e073      	b.n	8001e88 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	212c      	movs	r1, #44	; 0x2c
 8001da6:	fb01 f303 	mul.w	r3, r1, r3
 8001daa:	4413      	add	r3, r2
 8001dac:	3360      	adds	r3, #96	; 0x60
 8001dae:	2202      	movs	r2, #2
 8001db0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	015a      	lsls	r2, r3, #5
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4413      	add	r3, r2
 8001dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001dc8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001dd0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	015a      	lsls	r2, r3, #5
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4413      	add	r3, r2
 8001dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dde:	461a      	mov	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001de4:	e050      	b.n	8001e88 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	212c      	movs	r1, #44	; 0x2c
 8001dec:	fb01 f303 	mul.w	r3, r1, r3
 8001df0:	4413      	add	r3, r2
 8001df2:	3361      	adds	r3, #97	; 0x61
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d122      	bne.n	8001e40 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	212c      	movs	r1, #44	; 0x2c
 8001e00:	fb01 f303 	mul.w	r3, r1, r3
 8001e04:	4413      	add	r3, r2
 8001e06:	3360      	adds	r3, #96	; 0x60
 8001e08:	2202      	movs	r2, #2
 8001e0a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	015a      	lsls	r2, r3, #5
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4413      	add	r3, r2
 8001e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e22:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e2a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	015a      	lsls	r2, r3, #5
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4413      	add	r3, r2
 8001e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e38:	461a      	mov	r2, r3
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	e023      	b.n	8001e88 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	212c      	movs	r1, #44	; 0x2c
 8001e46:	fb01 f303 	mul.w	r3, r1, r3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	3361      	adds	r3, #97	; 0x61
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b07      	cmp	r3, #7
 8001e52:	d119      	bne.n	8001e88 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	212c      	movs	r1, #44	; 0x2c
 8001e5a:	fb01 f303 	mul.w	r3, r1, r3
 8001e5e:	4413      	add	r3, r2
 8001e60:	335c      	adds	r3, #92	; 0x5c
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	202c      	movs	r0, #44	; 0x2c
 8001e6c:	fb00 f303 	mul.w	r3, r0, r3
 8001e70:	440b      	add	r3, r1
 8001e72:	335c      	adds	r3, #92	; 0x5c
 8001e74:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	212c      	movs	r1, #44	; 0x2c
 8001e7c:	fb01 f303 	mul.w	r3, r1, r3
 8001e80:	4413      	add	r3, r2
 8001e82:	3360      	adds	r3, #96	; 0x60
 8001e84:	2204      	movs	r2, #4
 8001e86:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	015a      	lsls	r2, r3, #5
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4413      	add	r3, r2
 8001e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e94:	461a      	mov	r2, r3
 8001e96:	2302      	movs	r3, #2
 8001e98:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	b2d9      	uxtb	r1, r3
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	202c      	movs	r0, #44	; 0x2c
 8001ea4:	fb00 f303 	mul.w	r3, r0, r3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3360      	adds	r3, #96	; 0x60
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f003 fa73 	bl	800539c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001eb6:	e061      	b.n	8001f7c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	015a      	lsls	r2, r3, #5
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 0310 	and.w	r3, r3, #16
 8001eca:	2b10      	cmp	r3, #16
 8001ecc:	d156      	bne.n	8001f7c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	212c      	movs	r1, #44	; 0x2c
 8001ed4:	fb01 f303 	mul.w	r3, r1, r3
 8001ed8:	4413      	add	r3, r2
 8001eda:	333f      	adds	r3, #63	; 0x3f
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	d111      	bne.n	8001f06 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	212c      	movs	r1, #44	; 0x2c
 8001ee8:	fb01 f303 	mul.w	r3, r1, r3
 8001eec:	4413      	add	r3, r2
 8001eee:	335c      	adds	r3, #92	; 0x5c
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	4611      	mov	r1, r2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f001 ff43 	bl	8003d8a <USB_HC_Halt>
 8001f04:	e031      	b.n	8001f6a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	212c      	movs	r1, #44	; 0x2c
 8001f0c:	fb01 f303 	mul.w	r3, r1, r3
 8001f10:	4413      	add	r3, r2
 8001f12:	333f      	adds	r3, #63	; 0x3f
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d009      	beq.n	8001f2e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	212c      	movs	r1, #44	; 0x2c
 8001f20:	fb01 f303 	mul.w	r3, r1, r3
 8001f24:	4413      	add	r3, r2
 8001f26:	333f      	adds	r3, #63	; 0x3f
 8001f28:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d11d      	bne.n	8001f6a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	212c      	movs	r1, #44	; 0x2c
 8001f34:	fb01 f303 	mul.w	r3, r1, r3
 8001f38:	4413      	add	r3, r2
 8001f3a:	335c      	adds	r3, #92	; 0x5c
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d110      	bne.n	8001f6a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	212c      	movs	r1, #44	; 0x2c
 8001f4e:	fb01 f303 	mul.w	r3, r1, r3
 8001f52:	4413      	add	r3, r2
 8001f54:	3361      	adds	r3, #97	; 0x61
 8001f56:	2203      	movs	r2, #3
 8001f58:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	4611      	mov	r1, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f001 ff10 	bl	8003d8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	015a      	lsls	r2, r3, #5
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4413      	add	r3, r2
 8001f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f76:	461a      	mov	r2, r3
 8001f78:	2310      	movs	r3, #16
 8001f7a:	6093      	str	r3, [r2, #8]
}
 8001f7c:	bf00      	nop
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	015a      	lsls	r2, r3, #5
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b04      	cmp	r3, #4
 8001fb2:	d11a      	bne.n	8001fea <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	015a      	lsls	r2, r3, #5
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	2304      	movs	r3, #4
 8001fc4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	212c      	movs	r1, #44	; 0x2c
 8001fcc:	fb01 f303 	mul.w	r3, r1, r3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	3361      	adds	r3, #97	; 0x61
 8001fd4:	2206      	movs	r2, #6
 8001fd6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f001 fed1 	bl	8003d8a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8001fe8:	e331      	b.n	800264e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	015a      	lsls	r2, r3, #5
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 0320 	and.w	r3, r3, #32
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	d12e      	bne.n	800205e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	4413      	add	r3, r2
 8002008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200c:	461a      	mov	r2, r3
 800200e:	2320      	movs	r3, #32
 8002010:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	212c      	movs	r1, #44	; 0x2c
 8002018:	fb01 f303 	mul.w	r3, r1, r3
 800201c:	4413      	add	r3, r2
 800201e:	333d      	adds	r3, #61	; 0x3d
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b01      	cmp	r3, #1
 8002024:	f040 8313 	bne.w	800264e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	212c      	movs	r1, #44	; 0x2c
 800202e:	fb01 f303 	mul.w	r3, r1, r3
 8002032:	4413      	add	r3, r2
 8002034:	333d      	adds	r3, #61	; 0x3d
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	212c      	movs	r1, #44	; 0x2c
 8002040:	fb01 f303 	mul.w	r3, r1, r3
 8002044:	4413      	add	r3, r2
 8002046:	3360      	adds	r3, #96	; 0x60
 8002048:	2202      	movs	r2, #2
 800204a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	4611      	mov	r1, r2
 8002056:	4618      	mov	r0, r3
 8002058:	f001 fe97 	bl	8003d8a <USB_HC_Halt>
}
 800205c:	e2f7      	b.n	800264e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	015a      	lsls	r2, r3, #5
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	4413      	add	r3, r2
 8002066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002074:	d112      	bne.n	800209c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	015a      	lsls	r2, r3, #5
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	4413      	add	r3, r2
 800207e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002082:	461a      	mov	r2, r3
 8002084:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002088:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	4611      	mov	r1, r2
 8002094:	4618      	mov	r0, r3
 8002096:	f001 fe78 	bl	8003d8a <USB_HC_Halt>
}
 800209a:	e2d8      	b.n	800264e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	015a      	lsls	r2, r3, #5
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	4413      	add	r3, r2
 80020a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d140      	bne.n	8002134 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	212c      	movs	r1, #44	; 0x2c
 80020b8:	fb01 f303 	mul.w	r3, r1, r3
 80020bc:	4413      	add	r3, r2
 80020be:	335c      	adds	r3, #92	; 0x5c
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	015a      	lsls	r2, r3, #5
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	4413      	add	r3, r2
 80020cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d6:	2b40      	cmp	r3, #64	; 0x40
 80020d8:	d111      	bne.n	80020fe <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	212c      	movs	r1, #44	; 0x2c
 80020e0:	fb01 f303 	mul.w	r3, r1, r3
 80020e4:	4413      	add	r3, r2
 80020e6:	333d      	adds	r3, #61	; 0x3d
 80020e8:	2201      	movs	r2, #1
 80020ea:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f8:	461a      	mov	r2, r3
 80020fa:	2340      	movs	r3, #64	; 0x40
 80020fc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	015a      	lsls	r2, r3, #5
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	4413      	add	r3, r2
 8002106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210a:	461a      	mov	r2, r3
 800210c:	2301      	movs	r3, #1
 800210e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	212c      	movs	r1, #44	; 0x2c
 8002116:	fb01 f303 	mul.w	r3, r1, r3
 800211a:	4413      	add	r3, r2
 800211c:	3361      	adds	r3, #97	; 0x61
 800211e:	2201      	movs	r2, #1
 8002120:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	4611      	mov	r1, r2
 800212c:	4618      	mov	r0, r3
 800212e:	f001 fe2c 	bl	8003d8a <USB_HC_Halt>
}
 8002132:	e28c      	b.n	800264e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	015a      	lsls	r2, r3, #5
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	4413      	add	r3, r2
 800213c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002146:	2b40      	cmp	r3, #64	; 0x40
 8002148:	d12c      	bne.n	80021a4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	212c      	movs	r1, #44	; 0x2c
 8002150:	fb01 f303 	mul.w	r3, r1, r3
 8002154:	4413      	add	r3, r2
 8002156:	3361      	adds	r3, #97	; 0x61
 8002158:	2204      	movs	r2, #4
 800215a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	212c      	movs	r1, #44	; 0x2c
 8002162:	fb01 f303 	mul.w	r3, r1, r3
 8002166:	4413      	add	r3, r2
 8002168:	333d      	adds	r3, #61	; 0x3d
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	212c      	movs	r1, #44	; 0x2c
 8002174:	fb01 f303 	mul.w	r3, r1, r3
 8002178:	4413      	add	r3, r2
 800217a:	335c      	adds	r3, #92	; 0x5c
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f001 fdfd 	bl	8003d8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	015a      	lsls	r2, r3, #5
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	4413      	add	r3, r2
 8002198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219c:	461a      	mov	r2, r3
 800219e:	2340      	movs	r3, #64	; 0x40
 80021a0:	6093      	str	r3, [r2, #8]
}
 80021a2:	e254      	b.n	800264e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d11a      	bne.n	80021f0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	015a      	lsls	r2, r3, #5
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c6:	461a      	mov	r2, r3
 80021c8:	2308      	movs	r3, #8
 80021ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	212c      	movs	r1, #44	; 0x2c
 80021d2:	fb01 f303 	mul.w	r3, r1, r3
 80021d6:	4413      	add	r3, r2
 80021d8:	3361      	adds	r3, #97	; 0x61
 80021da:	2205      	movs	r2, #5
 80021dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f001 fdce 	bl	8003d8a <USB_HC_Halt>
}
 80021ee:	e22e      	b.n	800264e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	015a      	lsls	r2, r3, #5
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	4413      	add	r3, r2
 80021f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 0310 	and.w	r3, r3, #16
 8002202:	2b10      	cmp	r3, #16
 8002204:	d140      	bne.n	8002288 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	212c      	movs	r1, #44	; 0x2c
 800220c:	fb01 f303 	mul.w	r3, r1, r3
 8002210:	4413      	add	r3, r2
 8002212:	335c      	adds	r3, #92	; 0x5c
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	212c      	movs	r1, #44	; 0x2c
 800221e:	fb01 f303 	mul.w	r3, r1, r3
 8002222:	4413      	add	r3, r2
 8002224:	3361      	adds	r3, #97	; 0x61
 8002226:	2203      	movs	r2, #3
 8002228:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	212c      	movs	r1, #44	; 0x2c
 8002230:	fb01 f303 	mul.w	r3, r1, r3
 8002234:	4413      	add	r3, r2
 8002236:	333d      	adds	r3, #61	; 0x3d
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d112      	bne.n	8002264 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	212c      	movs	r1, #44	; 0x2c
 8002244:	fb01 f303 	mul.w	r3, r1, r3
 8002248:	4413      	add	r3, r2
 800224a:	333c      	adds	r3, #60	; 0x3c
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d108      	bne.n	8002264 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	212c      	movs	r1, #44	; 0x2c
 8002258:	fb01 f303 	mul.w	r3, r1, r3
 800225c:	4413      	add	r3, r2
 800225e:	333d      	adds	r3, #61	; 0x3d
 8002260:	2201      	movs	r2, #1
 8002262:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	4611      	mov	r1, r2
 800226e:	4618      	mov	r0, r3
 8002270:	f001 fd8b 	bl	8003d8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	015a      	lsls	r2, r3, #5
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	4413      	add	r3, r2
 800227c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002280:	461a      	mov	r2, r3
 8002282:	2310      	movs	r3, #16
 8002284:	6093      	str	r3, [r2, #8]
}
 8002286:	e1e2      	b.n	800264e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	4413      	add	r3, r2
 8002290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229a:	2b80      	cmp	r3, #128	; 0x80
 800229c:	d164      	bne.n	8002368 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d111      	bne.n	80022ca <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	212c      	movs	r1, #44	; 0x2c
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	3361      	adds	r3, #97	; 0x61
 80022b4:	2206      	movs	r2, #6
 80022b6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	4611      	mov	r1, r2
 80022c2:	4618      	mov	r0, r3
 80022c4:	f001 fd61 	bl	8003d8a <USB_HC_Halt>
 80022c8:	e044      	b.n	8002354 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	212c      	movs	r1, #44	; 0x2c
 80022d0:	fb01 f303 	mul.w	r3, r1, r3
 80022d4:	4413      	add	r3, r2
 80022d6:	335c      	adds	r3, #92	; 0x5c
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	202c      	movs	r0, #44	; 0x2c
 80022e2:	fb00 f303 	mul.w	r3, r0, r3
 80022e6:	440b      	add	r3, r1
 80022e8:	335c      	adds	r3, #92	; 0x5c
 80022ea:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	212c      	movs	r1, #44	; 0x2c
 80022f2:	fb01 f303 	mul.w	r3, r1, r3
 80022f6:	4413      	add	r3, r2
 80022f8:	335c      	adds	r3, #92	; 0x5c
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d920      	bls.n	8002342 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	212c      	movs	r1, #44	; 0x2c
 8002306:	fb01 f303 	mul.w	r3, r1, r3
 800230a:	4413      	add	r3, r2
 800230c:	335c      	adds	r3, #92	; 0x5c
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	212c      	movs	r1, #44	; 0x2c
 8002318:	fb01 f303 	mul.w	r3, r1, r3
 800231c:	4413      	add	r3, r2
 800231e:	3360      	adds	r3, #96	; 0x60
 8002320:	2204      	movs	r2, #4
 8002322:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	b2d9      	uxtb	r1, r3
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	202c      	movs	r0, #44	; 0x2c
 800232e:	fb00 f303 	mul.w	r3, r0, r3
 8002332:	4413      	add	r3, r2
 8002334:	3360      	adds	r3, #96	; 0x60
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f003 f82e 	bl	800539c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002340:	e008      	b.n	8002354 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	212c      	movs	r1, #44	; 0x2c
 8002348:	fb01 f303 	mul.w	r3, r1, r3
 800234c:	4413      	add	r3, r2
 800234e:	3360      	adds	r3, #96	; 0x60
 8002350:	2202      	movs	r2, #2
 8002352:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	015a      	lsls	r2, r3, #5
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	4413      	add	r3, r2
 800235c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002360:	461a      	mov	r2, r3
 8002362:	2380      	movs	r3, #128	; 0x80
 8002364:	6093      	str	r3, [r2, #8]
}
 8002366:	e172      	b.n	800264e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	4413      	add	r3, r2
 8002370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800237a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800237e:	d11b      	bne.n	80023b8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	212c      	movs	r1, #44	; 0x2c
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	4413      	add	r3, r2
 800238c:	3361      	adds	r3, #97	; 0x61
 800238e:	2208      	movs	r2, #8
 8002390:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	4611      	mov	r1, r2
 800239c:	4618      	mov	r0, r3
 800239e:	f001 fcf4 	bl	8003d8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	015a      	lsls	r2, r3, #5
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ae:	461a      	mov	r2, r3
 80023b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023b4:	6093      	str	r3, [r2, #8]
}
 80023b6:	e14a      	b.n	800264e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	015a      	lsls	r2, r3, #5
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	4413      	add	r3, r2
 80023c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	f040 813f 	bne.w	800264e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	212c      	movs	r1, #44	; 0x2c
 80023d6:	fb01 f303 	mul.w	r3, r1, r3
 80023da:	4413      	add	r3, r2
 80023dc:	3361      	adds	r3, #97	; 0x61
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d17d      	bne.n	80024e0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	212c      	movs	r1, #44	; 0x2c
 80023ea:	fb01 f303 	mul.w	r3, r1, r3
 80023ee:	4413      	add	r3, r2
 80023f0:	3360      	adds	r3, #96	; 0x60
 80023f2:	2201      	movs	r2, #1
 80023f4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	212c      	movs	r1, #44	; 0x2c
 80023fc:	fb01 f303 	mul.w	r3, r1, r3
 8002400:	4413      	add	r3, r2
 8002402:	333f      	adds	r3, #63	; 0x3f
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d00a      	beq.n	8002420 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	212c      	movs	r1, #44	; 0x2c
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	4413      	add	r3, r2
 8002416:	333f      	adds	r3, #63	; 0x3f
 8002418:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800241a:	2b03      	cmp	r3, #3
 800241c:	f040 8100 	bne.w	8002620 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d113      	bne.n	8002450 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	212c      	movs	r1, #44	; 0x2c
 800242e:	fb01 f303 	mul.w	r3, r1, r3
 8002432:	4413      	add	r3, r2
 8002434:	3355      	adds	r3, #85	; 0x55
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	f083 0301 	eor.w	r3, r3, #1
 800243c:	b2d8      	uxtb	r0, r3
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	212c      	movs	r1, #44	; 0x2c
 8002444:	fb01 f303 	mul.w	r3, r1, r3
 8002448:	4413      	add	r3, r2
 800244a:	3355      	adds	r3, #85	; 0x55
 800244c:	4602      	mov	r2, r0
 800244e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	2b01      	cmp	r3, #1
 8002456:	f040 80e3 	bne.w	8002620 <HCD_HC_OUT_IRQHandler+0x69c>
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	212c      	movs	r1, #44	; 0x2c
 8002460:	fb01 f303 	mul.w	r3, r1, r3
 8002464:	4413      	add	r3, r2
 8002466:	334c      	adds	r3, #76	; 0x4c
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 80d8 	beq.w	8002620 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	212c      	movs	r1, #44	; 0x2c
 8002476:	fb01 f303 	mul.w	r3, r1, r3
 800247a:	4413      	add	r3, r2
 800247c:	334c      	adds	r3, #76	; 0x4c
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	202c      	movs	r0, #44	; 0x2c
 8002486:	fb00 f202 	mul.w	r2, r0, r2
 800248a:	440a      	add	r2, r1
 800248c:	3240      	adds	r2, #64	; 0x40
 800248e:	8812      	ldrh	r2, [r2, #0]
 8002490:	4413      	add	r3, r2
 8002492:	3b01      	subs	r3, #1
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	202c      	movs	r0, #44	; 0x2c
 800249a:	fb00 f202 	mul.w	r2, r0, r2
 800249e:	440a      	add	r2, r1
 80024a0:	3240      	adds	r2, #64	; 0x40
 80024a2:	8812      	ldrh	r2, [r2, #0]
 80024a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 80b5 	beq.w	8002620 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	212c      	movs	r1, #44	; 0x2c
 80024bc:	fb01 f303 	mul.w	r3, r1, r3
 80024c0:	4413      	add	r3, r2
 80024c2:	3355      	adds	r3, #85	; 0x55
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	f083 0301 	eor.w	r3, r3, #1
 80024ca:	b2d8      	uxtb	r0, r3
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	212c      	movs	r1, #44	; 0x2c
 80024d2:	fb01 f303 	mul.w	r3, r1, r3
 80024d6:	4413      	add	r3, r2
 80024d8:	3355      	adds	r3, #85	; 0x55
 80024da:	4602      	mov	r2, r0
 80024dc:	701a      	strb	r2, [r3, #0]
 80024de:	e09f      	b.n	8002620 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	212c      	movs	r1, #44	; 0x2c
 80024e6:	fb01 f303 	mul.w	r3, r1, r3
 80024ea:	4413      	add	r3, r2
 80024ec:	3361      	adds	r3, #97	; 0x61
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	d109      	bne.n	8002508 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	212c      	movs	r1, #44	; 0x2c
 80024fa:	fb01 f303 	mul.w	r3, r1, r3
 80024fe:	4413      	add	r3, r2
 8002500:	3360      	adds	r3, #96	; 0x60
 8002502:	2202      	movs	r2, #2
 8002504:	701a      	strb	r2, [r3, #0]
 8002506:	e08b      	b.n	8002620 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	212c      	movs	r1, #44	; 0x2c
 800250e:	fb01 f303 	mul.w	r3, r1, r3
 8002512:	4413      	add	r3, r2
 8002514:	3361      	adds	r3, #97	; 0x61
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b04      	cmp	r3, #4
 800251a:	d109      	bne.n	8002530 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	212c      	movs	r1, #44	; 0x2c
 8002522:	fb01 f303 	mul.w	r3, r1, r3
 8002526:	4413      	add	r3, r2
 8002528:	3360      	adds	r3, #96	; 0x60
 800252a:	2202      	movs	r2, #2
 800252c:	701a      	strb	r2, [r3, #0]
 800252e:	e077      	b.n	8002620 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	212c      	movs	r1, #44	; 0x2c
 8002536:	fb01 f303 	mul.w	r3, r1, r3
 800253a:	4413      	add	r3, r2
 800253c:	3361      	adds	r3, #97	; 0x61
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b05      	cmp	r3, #5
 8002542:	d109      	bne.n	8002558 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	212c      	movs	r1, #44	; 0x2c
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	4413      	add	r3, r2
 8002550:	3360      	adds	r3, #96	; 0x60
 8002552:	2205      	movs	r2, #5
 8002554:	701a      	strb	r2, [r3, #0]
 8002556:	e063      	b.n	8002620 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	212c      	movs	r1, #44	; 0x2c
 800255e:	fb01 f303 	mul.w	r3, r1, r3
 8002562:	4413      	add	r3, r2
 8002564:	3361      	adds	r3, #97	; 0x61
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b06      	cmp	r3, #6
 800256a:	d009      	beq.n	8002580 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	212c      	movs	r1, #44	; 0x2c
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	4413      	add	r3, r2
 8002578:	3361      	adds	r3, #97	; 0x61
 800257a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800257c:	2b08      	cmp	r3, #8
 800257e:	d14f      	bne.n	8002620 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	212c      	movs	r1, #44	; 0x2c
 8002586:	fb01 f303 	mul.w	r3, r1, r3
 800258a:	4413      	add	r3, r2
 800258c:	335c      	adds	r3, #92	; 0x5c
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	202c      	movs	r0, #44	; 0x2c
 8002598:	fb00 f303 	mul.w	r3, r0, r3
 800259c:	440b      	add	r3, r1
 800259e:	335c      	adds	r3, #92	; 0x5c
 80025a0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	212c      	movs	r1, #44	; 0x2c
 80025a8:	fb01 f303 	mul.w	r3, r1, r3
 80025ac:	4413      	add	r3, r2
 80025ae:	335c      	adds	r3, #92	; 0x5c
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d912      	bls.n	80025dc <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	212c      	movs	r1, #44	; 0x2c
 80025bc:	fb01 f303 	mul.w	r3, r1, r3
 80025c0:	4413      	add	r3, r2
 80025c2:	335c      	adds	r3, #92	; 0x5c
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	212c      	movs	r1, #44	; 0x2c
 80025ce:	fb01 f303 	mul.w	r3, r1, r3
 80025d2:	4413      	add	r3, r2
 80025d4:	3360      	adds	r3, #96	; 0x60
 80025d6:	2204      	movs	r2, #4
 80025d8:	701a      	strb	r2, [r3, #0]
 80025da:	e021      	b.n	8002620 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	212c      	movs	r1, #44	; 0x2c
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	3360      	adds	r3, #96	; 0x60
 80025ea:	2202      	movs	r2, #2
 80025ec:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	015a      	lsls	r2, r3, #5
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	4413      	add	r3, r2
 80025f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002604:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800260c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	015a      	lsls	r2, r3, #5
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	4413      	add	r3, r2
 8002616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261a:	461a      	mov	r2, r3
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	4413      	add	r3, r2
 8002628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262c:	461a      	mov	r2, r3
 800262e:	2302      	movs	r3, #2
 8002630:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	b2d9      	uxtb	r1, r3
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	202c      	movs	r0, #44	; 0x2c
 800263c:	fb00 f303 	mul.w	r3, r0, r3
 8002640:	4413      	add	r3, r2
 8002642:	3360      	adds	r3, #96	; 0x60
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	461a      	mov	r2, r3
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f002 fea7 	bl	800539c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800264e:	bf00      	nop
 8002650:	3720      	adds	r7, #32
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b08a      	sub	sp, #40	; 0x28
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	0c5b      	lsrs	r3, r3, #17
 800267c:	f003 030f 	and.w	r3, r3, #15
 8002680:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	091b      	lsrs	r3, r3, #4
 8002686:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800268a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d004      	beq.n	800269c <HCD_RXQLVL_IRQHandler+0x46>
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2b05      	cmp	r3, #5
 8002696:	f000 80a9 	beq.w	80027ec <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800269a:	e0aa      	b.n	80027f2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 80a6 	beq.w	80027f0 <HCD_RXQLVL_IRQHandler+0x19a>
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	212c      	movs	r1, #44	; 0x2c
 80026aa:	fb01 f303 	mul.w	r3, r1, r3
 80026ae:	4413      	add	r3, r2
 80026b0:	3344      	adds	r3, #68	; 0x44
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 809b 	beq.w	80027f0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	212c      	movs	r1, #44	; 0x2c
 80026c0:	fb01 f303 	mul.w	r3, r1, r3
 80026c4:	4413      	add	r3, r2
 80026c6:	3350      	adds	r3, #80	; 0x50
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	441a      	add	r2, r3
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	202c      	movs	r0, #44	; 0x2c
 80026d4:	fb00 f303 	mul.w	r3, r0, r3
 80026d8:	440b      	add	r3, r1
 80026da:	334c      	adds	r3, #76	; 0x4c
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d87a      	bhi.n	80027d8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	212c      	movs	r1, #44	; 0x2c
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	3344      	adds	r3, #68	; 0x44
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	b292      	uxth	r2, r2
 80026fa:	4619      	mov	r1, r3
 80026fc:	f000 fec6 	bl	800348c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	212c      	movs	r1, #44	; 0x2c
 8002706:	fb01 f303 	mul.w	r3, r1, r3
 800270a:	4413      	add	r3, r2
 800270c:	3344      	adds	r3, #68	; 0x44
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	441a      	add	r2, r3
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	202c      	movs	r0, #44	; 0x2c
 800271a:	fb00 f303 	mul.w	r3, r0, r3
 800271e:	440b      	add	r3, r1
 8002720:	3344      	adds	r3, #68	; 0x44
 8002722:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	212c      	movs	r1, #44	; 0x2c
 800272a:	fb01 f303 	mul.w	r3, r1, r3
 800272e:	4413      	add	r3, r2
 8002730:	3350      	adds	r3, #80	; 0x50
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	441a      	add	r2, r3
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	202c      	movs	r0, #44	; 0x2c
 800273e:	fb00 f303 	mul.w	r3, r0, r3
 8002742:	440b      	add	r3, r1
 8002744:	3350      	adds	r3, #80	; 0x50
 8002746:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	4413      	add	r3, r2
 8002750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	0cdb      	lsrs	r3, r3, #19
 8002758:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800275c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	212c      	movs	r1, #44	; 0x2c
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	4413      	add	r3, r2
 800276a:	3340      	adds	r3, #64	; 0x40
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4293      	cmp	r3, r2
 8002774:	d13c      	bne.n	80027f0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d039      	beq.n	80027f0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	015a      	lsls	r2, r3, #5
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	4413      	add	r3, r2
 8002784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002792:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800279a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	015a      	lsls	r2, r3, #5
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a8:	461a      	mov	r2, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	212c      	movs	r1, #44	; 0x2c
 80027b4:	fb01 f303 	mul.w	r3, r1, r3
 80027b8:	4413      	add	r3, r2
 80027ba:	3354      	adds	r3, #84	; 0x54
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	f083 0301 	eor.w	r3, r3, #1
 80027c2:	b2d8      	uxtb	r0, r3
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	212c      	movs	r1, #44	; 0x2c
 80027ca:	fb01 f303 	mul.w	r3, r1, r3
 80027ce:	4413      	add	r3, r2
 80027d0:	3354      	adds	r3, #84	; 0x54
 80027d2:	4602      	mov	r2, r0
 80027d4:	701a      	strb	r2, [r3, #0]
      break;
 80027d6:	e00b      	b.n	80027f0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	212c      	movs	r1, #44	; 0x2c
 80027de:	fb01 f303 	mul.w	r3, r1, r3
 80027e2:	4413      	add	r3, r2
 80027e4:	3360      	adds	r3, #96	; 0x60
 80027e6:	2204      	movs	r2, #4
 80027e8:	701a      	strb	r2, [r3, #0]
      break;
 80027ea:	e001      	b.n	80027f0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80027ec:	bf00      	nop
 80027ee:	e000      	b.n	80027f2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80027f0:	bf00      	nop
  }
}
 80027f2:	bf00      	nop
 80027f4:	3728      	adds	r7, #40	; 0x28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b086      	sub	sp, #24
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002826:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b02      	cmp	r3, #2
 8002830:	d10b      	bne.n	800284a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b01      	cmp	r3, #1
 800283a:	d102      	bne.n	8002842 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f002 fd91 	bl	8005364 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	f043 0302 	orr.w	r3, r3, #2
 8002848:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	2b08      	cmp	r3, #8
 8002852:	d132      	bne.n	80028ba <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f043 0308 	orr.w	r3, r3, #8
 800285a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	2b04      	cmp	r3, #4
 8002864:	d126      	bne.n	80028b4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d113      	bne.n	8002896 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002874:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002878:	d106      	bne.n	8002888 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2102      	movs	r1, #2
 8002880:	4618      	mov	r0, r3
 8002882:	f000 ff71 	bl	8003768 <USB_InitFSLSPClkSel>
 8002886:	e011      	b.n	80028ac <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2101      	movs	r1, #1
 800288e:	4618      	mov	r0, r3
 8002890:	f000 ff6a 	bl	8003768 <USB_InitFSLSPClkSel>
 8002894:	e00a      	b.n	80028ac <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d106      	bne.n	80028ac <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028a4:	461a      	mov	r2, r3
 80028a6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80028aa:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f002 fd83 	bl	80053b8 <HAL_HCD_PortEnabled_Callback>
 80028b2:	e002      	b.n	80028ba <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f002 fd8d 	bl	80053d4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f003 0320 	and.w	r3, r3, #32
 80028c0:	2b20      	cmp	r3, #32
 80028c2:	d103      	bne.n	80028cc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f043 0320 	orr.w	r3, r3, #32
 80028ca:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80028d2:	461a      	mov	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	6013      	str	r3, [r2, #0]
}
 80028d8:	bf00      	nop
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e267      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d075      	beq.n	80029ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028fe:	4b88      	ldr	r3, [pc, #544]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 030c 	and.w	r3, r3, #12
 8002906:	2b04      	cmp	r3, #4
 8002908:	d00c      	beq.n	8002924 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800290a:	4b85      	ldr	r3, [pc, #532]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002912:	2b08      	cmp	r3, #8
 8002914:	d112      	bne.n	800293c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002916:	4b82      	ldr	r3, [pc, #520]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800291e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002922:	d10b      	bne.n	800293c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002924:	4b7e      	ldr	r3, [pc, #504]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d05b      	beq.n	80029e8 <HAL_RCC_OscConfig+0x108>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d157      	bne.n	80029e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e242      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002944:	d106      	bne.n	8002954 <HAL_RCC_OscConfig+0x74>
 8002946:	4b76      	ldr	r3, [pc, #472]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a75      	ldr	r2, [pc, #468]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 800294c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	e01d      	b.n	8002990 <HAL_RCC_OscConfig+0xb0>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800295c:	d10c      	bne.n	8002978 <HAL_RCC_OscConfig+0x98>
 800295e:	4b70      	ldr	r3, [pc, #448]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a6f      	ldr	r2, [pc, #444]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	4b6d      	ldr	r3, [pc, #436]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a6c      	ldr	r2, [pc, #432]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	e00b      	b.n	8002990 <HAL_RCC_OscConfig+0xb0>
 8002978:	4b69      	ldr	r3, [pc, #420]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a68      	ldr	r2, [pc, #416]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 800297e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	4b66      	ldr	r3, [pc, #408]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a65      	ldr	r2, [pc, #404]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 800298a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800298e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d013      	beq.n	80029c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7fe f8a2 	bl	8000ae0 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029a0:	f7fe f89e 	bl	8000ae0 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b64      	cmp	r3, #100	; 0x64
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e207      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b2:	4b5b      	ldr	r3, [pc, #364]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCC_OscConfig+0xc0>
 80029be:	e014      	b.n	80029ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7fe f88e 	bl	8000ae0 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c8:	f7fe f88a 	bl	8000ae0 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	; 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e1f3      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029da:	4b51      	ldr	r3, [pc, #324]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f0      	bne.n	80029c8 <HAL_RCC_OscConfig+0xe8>
 80029e6:	e000      	b.n	80029ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d063      	beq.n	8002abe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029f6:	4b4a      	ldr	r3, [pc, #296]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 030c 	and.w	r3, r3, #12
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00b      	beq.n	8002a1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a02:	4b47      	ldr	r3, [pc, #284]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d11c      	bne.n	8002a48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a0e:	4b44      	ldr	r3, [pc, #272]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d116      	bne.n	8002a48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1a:	4b41      	ldr	r3, [pc, #260]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d005      	beq.n	8002a32 <HAL_RCC_OscConfig+0x152>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d001      	beq.n	8002a32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e1c7      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a32:	4b3b      	ldr	r3, [pc, #236]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	4937      	ldr	r1, [pc, #220]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a46:	e03a      	b.n	8002abe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d020      	beq.n	8002a92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a50:	4b34      	ldr	r3, [pc, #208]	; (8002b24 <HAL_RCC_OscConfig+0x244>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a56:	f7fe f843 	bl	8000ae0 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a5e:	f7fe f83f 	bl	8000ae0 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e1a8      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a70:	4b2b      	ldr	r3, [pc, #172]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7c:	4b28      	ldr	r3, [pc, #160]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	4925      	ldr	r1, [pc, #148]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	600b      	str	r3, [r1, #0]
 8002a90:	e015      	b.n	8002abe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a92:	4b24      	ldr	r3, [pc, #144]	; (8002b24 <HAL_RCC_OscConfig+0x244>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a98:	f7fe f822 	bl	8000ae0 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aa0:	f7fe f81e 	bl	8000ae0 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e187      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ab2:	4b1b      	ldr	r3, [pc, #108]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d036      	beq.n	8002b38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d016      	beq.n	8002b00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ad2:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <HAL_RCC_OscConfig+0x248>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad8:	f7fe f802 	bl	8000ae0 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ae0:	f7fd fffe 	bl	8000ae0 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e167      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af2:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0f0      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x200>
 8002afe:	e01b      	b.n	8002b38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b00:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <HAL_RCC_OscConfig+0x248>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b06:	f7fd ffeb 	bl	8000ae0 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b0c:	e00e      	b.n	8002b2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b0e:	f7fd ffe7 	bl	8000ae0 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d907      	bls.n	8002b2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e150      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
 8002b20:	40023800 	.word	0x40023800
 8002b24:	42470000 	.word	0x42470000
 8002b28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b2c:	4b88      	ldr	r3, [pc, #544]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1ea      	bne.n	8002b0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 8097 	beq.w	8002c74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b46:	2300      	movs	r3, #0
 8002b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b4a:	4b81      	ldr	r3, [pc, #516]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10f      	bne.n	8002b76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	4b7d      	ldr	r3, [pc, #500]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	4a7c      	ldr	r2, [pc, #496]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b64:	6413      	str	r3, [r2, #64]	; 0x40
 8002b66:	4b7a      	ldr	r3, [pc, #488]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	60bb      	str	r3, [r7, #8]
 8002b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b72:	2301      	movs	r3, #1
 8002b74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b76:	4b77      	ldr	r3, [pc, #476]	; (8002d54 <HAL_RCC_OscConfig+0x474>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d118      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b82:	4b74      	ldr	r3, [pc, #464]	; (8002d54 <HAL_RCC_OscConfig+0x474>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a73      	ldr	r2, [pc, #460]	; (8002d54 <HAL_RCC_OscConfig+0x474>)
 8002b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b8e:	f7fd ffa7 	bl	8000ae0 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b96:	f7fd ffa3 	bl	8000ae0 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e10c      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba8:	4b6a      	ldr	r3, [pc, #424]	; (8002d54 <HAL_RCC_OscConfig+0x474>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0f0      	beq.n	8002b96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d106      	bne.n	8002bca <HAL_RCC_OscConfig+0x2ea>
 8002bbc:	4b64      	ldr	r3, [pc, #400]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc0:	4a63      	ldr	r2, [pc, #396]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc8:	e01c      	b.n	8002c04 <HAL_RCC_OscConfig+0x324>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2b05      	cmp	r3, #5
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0x30c>
 8002bd2:	4b5f      	ldr	r3, [pc, #380]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd6:	4a5e      	ldr	r2, [pc, #376]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002bd8:	f043 0304 	orr.w	r3, r3, #4
 8002bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002bde:	4b5c      	ldr	r3, [pc, #368]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be2:	4a5b      	ldr	r2, [pc, #364]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bea:	e00b      	b.n	8002c04 <HAL_RCC_OscConfig+0x324>
 8002bec:	4b58      	ldr	r3, [pc, #352]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf0:	4a57      	ldr	r2, [pc, #348]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002bf2:	f023 0301 	bic.w	r3, r3, #1
 8002bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf8:	4b55      	ldr	r3, [pc, #340]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfc:	4a54      	ldr	r2, [pc, #336]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002bfe:	f023 0304 	bic.w	r3, r3, #4
 8002c02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d015      	beq.n	8002c38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0c:	f7fd ff68 	bl	8000ae0 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c12:	e00a      	b.n	8002c2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c14:	f7fd ff64 	bl	8000ae0 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e0cb      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2a:	4b49      	ldr	r3, [pc, #292]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0ee      	beq.n	8002c14 <HAL_RCC_OscConfig+0x334>
 8002c36:	e014      	b.n	8002c62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c38:	f7fd ff52 	bl	8000ae0 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c40:	f7fd ff4e 	bl	8000ae0 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e0b5      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c56:	4b3e      	ldr	r3, [pc, #248]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1ee      	bne.n	8002c40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c62:	7dfb      	ldrb	r3, [r7, #23]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d105      	bne.n	8002c74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c68:	4b39      	ldr	r3, [pc, #228]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	4a38      	ldr	r2, [pc, #224]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002c6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 80a1 	beq.w	8002dc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c7e:	4b34      	ldr	r3, [pc, #208]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d05c      	beq.n	8002d44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d141      	bne.n	8002d16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c92:	4b31      	ldr	r3, [pc, #196]	; (8002d58 <HAL_RCC_OscConfig+0x478>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7fd ff22 	bl	8000ae0 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca0:	f7fd ff1e 	bl	8000ae0 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e087      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb2:	4b27      	ldr	r3, [pc, #156]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69da      	ldr	r2, [r3, #28]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	019b      	lsls	r3, r3, #6
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd4:	085b      	lsrs	r3, r3, #1
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	041b      	lsls	r3, r3, #16
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	061b      	lsls	r3, r3, #24
 8002ce2:	491b      	ldr	r1, [pc, #108]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ce8:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <HAL_RCC_OscConfig+0x478>)
 8002cea:	2201      	movs	r2, #1
 8002cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cee:	f7fd fef7 	bl	8000ae0 <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf6:	f7fd fef3 	bl	8000ae0 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e05c      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d08:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0f0      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x416>
 8002d14:	e054      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d16:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <HAL_RCC_OscConfig+0x478>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1c:	f7fd fee0 	bl	8000ae0 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d24:	f7fd fedc 	bl	8000ae0 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e045      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d36:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x444>
 8002d42:	e03d      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d107      	bne.n	8002d5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e038      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
 8002d50:	40023800 	.word	0x40023800
 8002d54:	40007000 	.word	0x40007000
 8002d58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d5c:	4b1b      	ldr	r3, [pc, #108]	; (8002dcc <HAL_RCC_OscConfig+0x4ec>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d028      	beq.n	8002dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d121      	bne.n	8002dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d11a      	bne.n	8002dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d111      	bne.n	8002dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da2:	085b      	lsrs	r3, r3, #1
 8002da4:	3b01      	subs	r3, #1
 8002da6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d107      	bne.n	8002dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e000      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40023800 	.word	0x40023800

08002dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0cc      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002de4:	4b68      	ldr	r3, [pc, #416]	; (8002f88 <HAL_RCC_ClockConfig+0x1b8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d90c      	bls.n	8002e0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df2:	4b65      	ldr	r3, [pc, #404]	; (8002f88 <HAL_RCC_ClockConfig+0x1b8>)
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfa:	4b63      	ldr	r3, [pc, #396]	; (8002f88 <HAL_RCC_ClockConfig+0x1b8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d001      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0b8      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d020      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e24:	4b59      	ldr	r3, [pc, #356]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	4a58      	ldr	r2, [pc, #352]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e3c:	4b53      	ldr	r3, [pc, #332]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	4a52      	ldr	r2, [pc, #328]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e48:	4b50      	ldr	r3, [pc, #320]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	494d      	ldr	r1, [pc, #308]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d044      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d107      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6e:	4b47      	ldr	r3, [pc, #284]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d119      	bne.n	8002eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e07f      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d003      	beq.n	8002e8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d107      	bne.n	8002e9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8e:	4b3f      	ldr	r3, [pc, #252]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d109      	bne.n	8002eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e06f      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9e:	4b3b      	ldr	r3, [pc, #236]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e067      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eae:	4b37      	ldr	r3, [pc, #220]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f023 0203 	bic.w	r2, r3, #3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	4934      	ldr	r1, [pc, #208]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ec0:	f7fd fe0e 	bl	8000ae0 <HAL_GetTick>
 8002ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec6:	e00a      	b.n	8002ede <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec8:	f7fd fe0a 	bl	8000ae0 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e04f      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ede:	4b2b      	ldr	r3, [pc, #172]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 020c 	and.w	r2, r3, #12
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d1eb      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ef0:	4b25      	ldr	r3, [pc, #148]	; (8002f88 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d20c      	bcs.n	8002f18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efe:	4b22      	ldr	r3, [pc, #136]	; (8002f88 <HAL_RCC_ClockConfig+0x1b8>)
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f06:	4b20      	ldr	r3, [pc, #128]	; (8002f88 <HAL_RCC_ClockConfig+0x1b8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d001      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e032      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d008      	beq.n	8002f36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f24:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	4916      	ldr	r1, [pc, #88]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d009      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f42:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	490e      	ldr	r1, [pc, #56]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f56:	f000 f821 	bl	8002f9c <HAL_RCC_GetSysClockFreq>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	490a      	ldr	r1, [pc, #40]	; (8002f90 <HAL_RCC_ClockConfig+0x1c0>)
 8002f68:	5ccb      	ldrb	r3, [r1, r3]
 8002f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6e:	4a09      	ldr	r2, [pc, #36]	; (8002f94 <HAL_RCC_ClockConfig+0x1c4>)
 8002f70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f72:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <HAL_RCC_ClockConfig+0x1c8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fd fd6e 	bl	8000a58 <HAL_InitTick>

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40023c00 	.word	0x40023c00
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	080059d8 	.word	0x080059d8
 8002f94:	20000000 	.word	0x20000000
 8002f98:	20000004 	.word	0x20000004

08002f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fa0:	b094      	sub	sp, #80	; 0x50
 8002fa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	647b      	str	r3, [r7, #68]	; 0x44
 8002fa8:	2300      	movs	r3, #0
 8002faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fac:	2300      	movs	r3, #0
 8002fae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fb4:	4b79      	ldr	r3, [pc, #484]	; (800319c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 030c 	and.w	r3, r3, #12
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d00d      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0x40>
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	f200 80e1 	bhi.w	8003188 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x34>
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d003      	beq.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002fce:	e0db      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fd0:	4b73      	ldr	r3, [pc, #460]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fd2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002fd4:	e0db      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fd6:	4b73      	ldr	r3, [pc, #460]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002fd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fda:	e0d8      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fdc:	4b6f      	ldr	r3, [pc, #444]	; (800319c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fe4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fe6:	4b6d      	ldr	r3, [pc, #436]	; (800319c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d063      	beq.n	80030ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ff2:	4b6a      	ldr	r3, [pc, #424]	; (800319c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	099b      	lsrs	r3, r3, #6
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ffc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003004:	633b      	str	r3, [r7, #48]	; 0x30
 8003006:	2300      	movs	r3, #0
 8003008:	637b      	str	r3, [r7, #52]	; 0x34
 800300a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800300e:	4622      	mov	r2, r4
 8003010:	462b      	mov	r3, r5
 8003012:	f04f 0000 	mov.w	r0, #0
 8003016:	f04f 0100 	mov.w	r1, #0
 800301a:	0159      	lsls	r1, r3, #5
 800301c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003020:	0150      	lsls	r0, r2, #5
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	4621      	mov	r1, r4
 8003028:	1a51      	subs	r1, r2, r1
 800302a:	6139      	str	r1, [r7, #16]
 800302c:	4629      	mov	r1, r5
 800302e:	eb63 0301 	sbc.w	r3, r3, r1
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003040:	4659      	mov	r1, fp
 8003042:	018b      	lsls	r3, r1, #6
 8003044:	4651      	mov	r1, sl
 8003046:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800304a:	4651      	mov	r1, sl
 800304c:	018a      	lsls	r2, r1, #6
 800304e:	4651      	mov	r1, sl
 8003050:	ebb2 0801 	subs.w	r8, r2, r1
 8003054:	4659      	mov	r1, fp
 8003056:	eb63 0901 	sbc.w	r9, r3, r1
 800305a:	f04f 0200 	mov.w	r2, #0
 800305e:	f04f 0300 	mov.w	r3, #0
 8003062:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003066:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800306a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800306e:	4690      	mov	r8, r2
 8003070:	4699      	mov	r9, r3
 8003072:	4623      	mov	r3, r4
 8003074:	eb18 0303 	adds.w	r3, r8, r3
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	462b      	mov	r3, r5
 800307c:	eb49 0303 	adc.w	r3, r9, r3
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800308e:	4629      	mov	r1, r5
 8003090:	024b      	lsls	r3, r1, #9
 8003092:	4621      	mov	r1, r4
 8003094:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003098:	4621      	mov	r1, r4
 800309a:	024a      	lsls	r2, r1, #9
 800309c:	4610      	mov	r0, r2
 800309e:	4619      	mov	r1, r3
 80030a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030a2:	2200      	movs	r2, #0
 80030a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80030a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030ac:	f7fd f88c 	bl	80001c8 <__aeabi_uldivmod>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4613      	mov	r3, r2
 80030b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030b8:	e058      	b.n	800316c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ba:	4b38      	ldr	r3, [pc, #224]	; (800319c <HAL_RCC_GetSysClockFreq+0x200>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	099b      	lsrs	r3, r3, #6
 80030c0:	2200      	movs	r2, #0
 80030c2:	4618      	mov	r0, r3
 80030c4:	4611      	mov	r1, r2
 80030c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030ca:	623b      	str	r3, [r7, #32]
 80030cc:	2300      	movs	r3, #0
 80030ce:	627b      	str	r3, [r7, #36]	; 0x24
 80030d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030d4:	4642      	mov	r2, r8
 80030d6:	464b      	mov	r3, r9
 80030d8:	f04f 0000 	mov.w	r0, #0
 80030dc:	f04f 0100 	mov.w	r1, #0
 80030e0:	0159      	lsls	r1, r3, #5
 80030e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030e6:	0150      	lsls	r0, r2, #5
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4641      	mov	r1, r8
 80030ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80030f2:	4649      	mov	r1, r9
 80030f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003104:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003108:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800310c:	ebb2 040a 	subs.w	r4, r2, sl
 8003110:	eb63 050b 	sbc.w	r5, r3, fp
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	00eb      	lsls	r3, r5, #3
 800311e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003122:	00e2      	lsls	r2, r4, #3
 8003124:	4614      	mov	r4, r2
 8003126:	461d      	mov	r5, r3
 8003128:	4643      	mov	r3, r8
 800312a:	18e3      	adds	r3, r4, r3
 800312c:	603b      	str	r3, [r7, #0]
 800312e:	464b      	mov	r3, r9
 8003130:	eb45 0303 	adc.w	r3, r5, r3
 8003134:	607b      	str	r3, [r7, #4]
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003142:	4629      	mov	r1, r5
 8003144:	028b      	lsls	r3, r1, #10
 8003146:	4621      	mov	r1, r4
 8003148:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800314c:	4621      	mov	r1, r4
 800314e:	028a      	lsls	r2, r1, #10
 8003150:	4610      	mov	r0, r2
 8003152:	4619      	mov	r1, r3
 8003154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003156:	2200      	movs	r2, #0
 8003158:	61bb      	str	r3, [r7, #24]
 800315a:	61fa      	str	r2, [r7, #28]
 800315c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003160:	f7fd f832 	bl	80001c8 <__aeabi_uldivmod>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	4613      	mov	r3, r2
 800316a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800316c:	4b0b      	ldr	r3, [pc, #44]	; (800319c <HAL_RCC_GetSysClockFreq+0x200>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	0c1b      	lsrs	r3, r3, #16
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	3301      	adds	r3, #1
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800317c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800317e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003180:	fbb2 f3f3 	udiv	r3, r2, r3
 8003184:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003186:	e002      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003188:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800318a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800318c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800318e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003190:	4618      	mov	r0, r3
 8003192:	3750      	adds	r7, #80	; 0x50
 8003194:	46bd      	mov	sp, r7
 8003196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800319a:	bf00      	nop
 800319c:	40023800 	.word	0x40023800
 80031a0:	00f42400 	.word	0x00f42400
 80031a4:	007a1200 	.word	0x007a1200

080031a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80031a8:	b084      	sub	sp, #16
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b084      	sub	sp, #16
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
 80031b2:	f107 001c 	add.w	r0, r7, #28
 80031b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80031ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d122      	bne.n	8003206 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80031d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80031e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d105      	bne.n	80031fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f9c0 	bl	8003580 <USB_CoreReset>
 8003200:	4603      	mov	r3, r0
 8003202:	73fb      	strb	r3, [r7, #15]
 8003204:	e01a      	b.n	800323c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f9b4 	bl	8003580 <USB_CoreReset>
 8003218:	4603      	mov	r3, r0
 800321a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800321c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800321e:	2b00      	cmp	r3, #0
 8003220:	d106      	bne.n	8003230 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	639a      	str	r2, [r3, #56]	; 0x38
 800322e:	e005      	b.n	800323c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003234:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800323c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323e:	2b01      	cmp	r3, #1
 8003240:	d10b      	bne.n	800325a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f043 0206 	orr.w	r2, r3, #6
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f043 0220 	orr.w	r2, r3, #32
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800325a:	7bfb      	ldrb	r3, [r7, #15]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003266:	b004      	add	sp, #16
 8003268:	4770      	bx	lr

0800326a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f043 0201 	orr.w	r2, r3, #1
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f023 0201 	bic.w	r2, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b084      	sub	sp, #16
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	460b      	mov	r3, r1
 80032b8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80032ca:	78fb      	ldrb	r3, [r7, #3]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d115      	bne.n	80032fc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80032dc:	2001      	movs	r0, #1
 80032de:	f7fd fc0b 	bl	8000af8 <HAL_Delay>
      ms++;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	3301      	adds	r3, #1
 80032e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f93a 	bl	8003562 <USB_GetMode>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d01e      	beq.n	8003332 <USB_SetCurrentMode+0x84>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b31      	cmp	r3, #49	; 0x31
 80032f8:	d9f0      	bls.n	80032dc <USB_SetCurrentMode+0x2e>
 80032fa:	e01a      	b.n	8003332 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80032fc:	78fb      	ldrb	r3, [r7, #3]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d115      	bne.n	800332e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800330e:	2001      	movs	r0, #1
 8003310:	f7fd fbf2 	bl	8000af8 <HAL_Delay>
      ms++;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	3301      	adds	r3, #1
 8003318:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f921 	bl	8003562 <USB_GetMode>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d005      	beq.n	8003332 <USB_SetCurrentMode+0x84>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2b31      	cmp	r3, #49	; 0x31
 800332a:	d9f0      	bls.n	800330e <USB_SetCurrentMode+0x60>
 800332c:	e001      	b.n	8003332 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e005      	b.n	800333e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2b32      	cmp	r3, #50	; 0x32
 8003336:	d101      	bne.n	800333c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e000      	b.n	800333e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	3301      	adds	r3, #1
 800335a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4a13      	ldr	r2, [pc, #76]	; (80033ac <USB_FlushTxFifo+0x64>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d901      	bls.n	8003368 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e01b      	b.n	80033a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	daf2      	bge.n	8003356 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	019b      	lsls	r3, r3, #6
 8003378:	f043 0220 	orr.w	r2, r3, #32
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	3301      	adds	r3, #1
 8003384:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4a08      	ldr	r2, [pc, #32]	; (80033ac <USB_FlushTxFifo+0x64>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d901      	bls.n	8003392 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e006      	b.n	80033a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	f003 0320 	and.w	r3, r3, #32
 800339a:	2b20      	cmp	r3, #32
 800339c:	d0f0      	beq.n	8003380 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	00030d40 	.word	0x00030d40

080033b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	3301      	adds	r3, #1
 80033c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4a11      	ldr	r2, [pc, #68]	; (800340c <USB_FlushRxFifo+0x5c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d901      	bls.n	80033ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e018      	b.n	8003400 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	daf2      	bge.n	80033bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2210      	movs	r2, #16
 80033de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	3301      	adds	r3, #1
 80033e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4a08      	ldr	r2, [pc, #32]	; (800340c <USB_FlushRxFifo+0x5c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d901      	bls.n	80033f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e006      	b.n	8003400 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f003 0310 	and.w	r3, r3, #16
 80033fa:	2b10      	cmp	r3, #16
 80033fc:	d0f0      	beq.n	80033e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	00030d40 	.word	0x00030d40

08003410 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003410:	b480      	push	{r7}
 8003412:	b089      	sub	sp, #36	; 0x24
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	4611      	mov	r1, r2
 800341c:	461a      	mov	r2, r3
 800341e:	460b      	mov	r3, r1
 8003420:	71fb      	strb	r3, [r7, #7]
 8003422:	4613      	mov	r3, r2
 8003424:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800342e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003432:	2b00      	cmp	r3, #0
 8003434:	d123      	bne.n	800347e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003436:	88bb      	ldrh	r3, [r7, #4]
 8003438:	3303      	adds	r3, #3
 800343a:	089b      	lsrs	r3, r3, #2
 800343c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800343e:	2300      	movs	r3, #0
 8003440:	61bb      	str	r3, [r7, #24]
 8003442:	e018      	b.n	8003476 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	031a      	lsls	r2, r3, #12
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	4413      	add	r3, r2
 800344c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003450:	461a      	mov	r2, r3
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	3301      	adds	r3, #1
 800345c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	3301      	adds	r3, #1
 8003462:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	3301      	adds	r3, #1
 8003468:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	3301      	adds	r3, #1
 800346e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	3301      	adds	r3, #1
 8003474:	61bb      	str	r3, [r7, #24]
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	429a      	cmp	r2, r3
 800347c:	d3e2      	bcc.n	8003444 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3724      	adds	r7, #36	; 0x24
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800348c:	b480      	push	{r7}
 800348e:	b08b      	sub	sp, #44	; 0x2c
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	4613      	mov	r3, r2
 8003498:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80034a2:	88fb      	ldrh	r3, [r7, #6]
 80034a4:	089b      	lsrs	r3, r3, #2
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80034b2:	2300      	movs	r3, #0
 80034b4:	623b      	str	r3, [r7, #32]
 80034b6:	e014      	b.n	80034e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	3301      	adds	r3, #1
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	3301      	adds	r3, #1
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	3301      	adds	r3, #1
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	3301      	adds	r3, #1
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	3301      	adds	r3, #1
 80034e0:	623b      	str	r3, [r7, #32]
 80034e2:	6a3a      	ldr	r2, [r7, #32]
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d3e6      	bcc.n	80034b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80034ea:	8bfb      	ldrh	r3, [r7, #30]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d01e      	beq.n	800352e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034fa:	461a      	mov	r2, r3
 80034fc:	f107 0310 	add.w	r3, r7, #16
 8003500:	6812      	ldr	r2, [r2, #0]
 8003502:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	b2db      	uxtb	r3, r3
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	fa22 f303 	lsr.w	r3, r2, r3
 8003510:	b2da      	uxtb	r2, r3
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	701a      	strb	r2, [r3, #0]
      i++;
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	3301      	adds	r3, #1
 800351a:	623b      	str	r3, [r7, #32]
      pDest++;
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	3301      	adds	r3, #1
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003522:	8bfb      	ldrh	r3, [r7, #30]
 8003524:	3b01      	subs	r3, #1
 8003526:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003528:	8bfb      	ldrh	r3, [r7, #30]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1ea      	bne.n	8003504 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003530:	4618      	mov	r0, r3
 8003532:	372c      	adds	r7, #44	; 0x2c
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	4013      	ands	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003554:	68fb      	ldr	r3, [r7, #12]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	f003 0301 	and.w	r3, r3, #1
}
 8003572:	4618      	mov	r0, r3
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	3301      	adds	r3, #1
 8003590:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4a13      	ldr	r2, [pc, #76]	; (80035e4 <USB_CoreReset+0x64>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d901      	bls.n	800359e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e01b      	b.n	80035d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	daf2      	bge.n	800358c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f043 0201 	orr.w	r2, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	3301      	adds	r3, #1
 80035ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4a09      	ldr	r2, [pc, #36]	; (80035e4 <USB_CoreReset+0x64>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d901      	bls.n	80035c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e006      	b.n	80035d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d0f0      	beq.n	80035b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	00030d40 	.word	0x00030d40

080035e8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035e8:	b084      	sub	sp, #16
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b086      	sub	sp, #24
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80035f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003608:	461a      	mov	r2, r3
 800360a:	2300      	movs	r3, #0
 800360c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003612:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363a:	2b00      	cmp	r3, #0
 800363c:	d018      	beq.n	8003670 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800363e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003640:	2b01      	cmp	r3, #1
 8003642:	d10a      	bne.n	800365a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003652:	f043 0304 	orr.w	r3, r3, #4
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	e014      	b.n	8003684 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003668:	f023 0304 	bic.w	r3, r3, #4
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	e009      	b.n	8003684 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800367e:	f023 0304 	bic.w	r3, r3, #4
 8003682:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003684:	2110      	movs	r1, #16
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff fe5e 	bl	8003348 <USB_FlushTxFifo>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff fe8a 	bl	80033b0 <USB_FlushRxFifo>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80036a6:	2300      	movs	r3, #0
 80036a8:	613b      	str	r3, [r7, #16]
 80036aa:	e015      	b.n	80036d8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b8:	461a      	mov	r2, r3
 80036ba:	f04f 33ff 	mov.w	r3, #4294967295
 80036be:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	015a      	lsls	r2, r3, #5
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036cc:	461a      	mov	r2, r3
 80036ce:	2300      	movs	r3, #0
 80036d0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	3301      	adds	r3, #1
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d3e5      	bcc.n	80036ac <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f04f 32ff 	mov.w	r2, #4294967295
 80036ec:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00b      	beq.n	8003712 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003700:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a13      	ldr	r2, [pc, #76]	; (8003754 <USB_HostInit+0x16c>)
 8003706:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a13      	ldr	r2, [pc, #76]	; (8003758 <USB_HostInit+0x170>)
 800370c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003710:	e009      	b.n	8003726 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2280      	movs	r2, #128	; 0x80
 8003716:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a10      	ldr	r2, [pc, #64]	; (800375c <USB_HostInit+0x174>)
 800371c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a0f      	ldr	r2, [pc, #60]	; (8003760 <USB_HostInit+0x178>)
 8003722:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003728:	2b00      	cmp	r3, #0
 800372a:	d105      	bne.n	8003738 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	f043 0210 	orr.w	r2, r3, #16
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	699a      	ldr	r2, [r3, #24]
 800373c:	4b09      	ldr	r3, [pc, #36]	; (8003764 <USB_HostInit+0x17c>)
 800373e:	4313      	orrs	r3, r2
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8003744:	7dfb      	ldrb	r3, [r7, #23]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003750:	b004      	add	sp, #16
 8003752:	4770      	bx	lr
 8003754:	01000200 	.word	0x01000200
 8003758:	00e00300 	.word	0x00e00300
 800375c:	00600080 	.word	0x00600080
 8003760:	004000e0 	.word	0x004000e0
 8003764:	a3200008 	.word	0xa3200008

08003768 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003786:	f023 0303 	bic.w	r3, r3, #3
 800378a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	68f9      	ldr	r1, [r7, #12]
 800379c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80037a0:	4313      	orrs	r3, r2
 80037a2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80037a4:	78fb      	ldrb	r3, [r7, #3]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d107      	bne.n	80037ba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037b0:	461a      	mov	r2, r3
 80037b2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80037b6:	6053      	str	r3, [r2, #4]
 80037b8:	e009      	b.n	80037ce <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80037ba:	78fb      	ldrb	r3, [r7, #3]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d106      	bne.n	80037ce <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037c6:	461a      	mov	r2, r3
 80037c8:	f241 7370 	movw	r3, #6000	; 0x1770
 80037cc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	460b      	mov	r3, r1
 80037e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003800:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d109      	bne.n	8003820 <USB_DriveVbus+0x44>
 800380c:	78fb      	ldrb	r3, [r7, #3]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d106      	bne.n	8003820 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800381a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800381e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800382a:	d109      	bne.n	8003840 <USB_DriveVbus+0x64>
 800382c:	78fb      	ldrb	r3, [r7, #3]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d106      	bne.n	8003840 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800383a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800383e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800384e:	b480      	push	{r7}
 8003850:	b085      	sub	sp, #20
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	0c5b      	lsrs	r3, r3, #17
 800386c:	f003 0303 	and.w	r3, r3, #3
}
 8003870:	4618      	mov	r0, r3
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	b29b      	uxth	r3, r3
}
 8003892:	4618      	mov	r0, r3
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
	...

080038a0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b088      	sub	sp, #32
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	4608      	mov	r0, r1
 80038aa:	4611      	mov	r1, r2
 80038ac:	461a      	mov	r2, r3
 80038ae:	4603      	mov	r3, r0
 80038b0:	70fb      	strb	r3, [r7, #3]
 80038b2:	460b      	mov	r3, r1
 80038b4:	70bb      	strb	r3, [r7, #2]
 80038b6:	4613      	mov	r3, r2
 80038b8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80038c2:	78fb      	ldrb	r3, [r7, #3]
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ce:	461a      	mov	r2, r3
 80038d0:	f04f 33ff 	mov.w	r3, #4294967295
 80038d4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80038d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d87e      	bhi.n	80039dc <USB_HC_Init+0x13c>
 80038de:	a201      	add	r2, pc, #4	; (adr r2, 80038e4 <USB_HC_Init+0x44>)
 80038e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e4:	080038f5 	.word	0x080038f5
 80038e8:	0800399f 	.word	0x0800399f
 80038ec:	080038f5 	.word	0x080038f5
 80038f0:	08003961 	.word	0x08003961
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80038f4:	78fb      	ldrb	r3, [r7, #3]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003900:	461a      	mov	r2, r3
 8003902:	f240 439d 	movw	r3, #1181	; 0x49d
 8003906:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8003908:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800390c:	2b00      	cmp	r3, #0
 800390e:	da10      	bge.n	8003932 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003910:	78fb      	ldrb	r3, [r7, #3]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	4413      	add	r3, r2
 8003918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	78fa      	ldrb	r2, [r7, #3]
 8003920:	0151      	lsls	r1, r2, #5
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	440a      	add	r2, r1
 8003926:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800392a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800392e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8003930:	e057      	b.n	80039e2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393a:	2b00      	cmp	r3, #0
 800393c:	d051      	beq.n	80039e2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800393e:	78fb      	ldrb	r3, [r7, #3]
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	4413      	add	r3, r2
 8003946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	78fa      	ldrb	r2, [r7, #3]
 800394e:	0151      	lsls	r1, r2, #5
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	440a      	add	r2, r1
 8003954:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003958:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800395c:	60d3      	str	r3, [r2, #12]
      break;
 800395e:	e040      	b.n	80039e2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003960:	78fb      	ldrb	r3, [r7, #3]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	4413      	add	r3, r2
 8003968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800396c:	461a      	mov	r2, r3
 800396e:	f240 639d 	movw	r3, #1693	; 0x69d
 8003972:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8003974:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003978:	2b00      	cmp	r3, #0
 800397a:	da34      	bge.n	80039e6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4413      	add	r3, r2
 8003984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	78fa      	ldrb	r2, [r7, #3]
 800398c:	0151      	lsls	r1, r2, #5
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	440a      	add	r2, r1
 8003992:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800399c:	e023      	b.n	80039e6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800399e:	78fb      	ldrb	r3, [r7, #3]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039aa:	461a      	mov	r2, r3
 80039ac:	f240 2325 	movw	r3, #549	; 0x225
 80039b0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80039b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	da17      	bge.n	80039ea <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80039ba:	78fb      	ldrb	r3, [r7, #3]
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	0151      	lsls	r1, r2, #5
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	440a      	add	r2, r1
 80039d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039d4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80039d8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80039da:	e006      	b.n	80039ea <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	77fb      	strb	r3, [r7, #31]
      break;
 80039e0:	e004      	b.n	80039ec <USB_HC_Init+0x14c>
      break;
 80039e2:	bf00      	nop
 80039e4:	e002      	b.n	80039ec <USB_HC_Init+0x14c>
      break;
 80039e6:	bf00      	nop
 80039e8:	e000      	b.n	80039ec <USB_HC_Init+0x14c>
      break;
 80039ea:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80039ec:	78fb      	ldrb	r3, [r7, #3]
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	78fa      	ldrb	r2, [r7, #3]
 80039fc:	0151      	lsls	r1, r2, #5
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	440a      	add	r2, r1
 8003a02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a06:	f043 0302 	orr.w	r3, r3, #2
 8003a0a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a12:	699a      	ldr	r2, [r3, #24]
 8003a14:	78fb      	ldrb	r3, [r7, #3]
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a20:	6939      	ldr	r1, [r7, #16]
 8003a22:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003a26:	4313      	orrs	r3, r2
 8003a28:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8003a36:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	da03      	bge.n	8003a46 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8003a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a42:	61bb      	str	r3, [r7, #24]
 8003a44:	e001      	b.n	8003a4a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff feff 	bl	800384e <USB_GetHostSpeed>
 8003a50:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8003a52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d106      	bne.n	8003a68 <USB_HC_Init+0x1c8>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d003      	beq.n	8003a68 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8003a60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	e001      	b.n	8003a6c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003a6c:	787b      	ldrb	r3, [r7, #1]
 8003a6e:	059b      	lsls	r3, r3, #22
 8003a70:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8003a74:	78bb      	ldrb	r3, [r7, #2]
 8003a76:	02db      	lsls	r3, r3, #11
 8003a78:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003a7c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003a7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003a82:	049b      	lsls	r3, r3, #18
 8003a84:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8003a88:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003a8a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003a8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003a90:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003a96:	78fb      	ldrb	r3, [r7, #3]
 8003a98:	0159      	lsls	r1, r3, #5
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	440b      	add	r3, r1
 8003a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003aa8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8003aaa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003aae:	2b03      	cmp	r3, #3
 8003ab0:	d003      	beq.n	8003aba <USB_HC_Init+0x21a>
 8003ab2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d10f      	bne.n	8003ada <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003aba:	78fb      	ldrb	r3, [r7, #3]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	78fa      	ldrb	r2, [r7, #3]
 8003aca:	0151      	lsls	r1, r2, #5
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	440a      	add	r2, r1
 8003ad0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ad4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ad8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8003ada:	7ffb      	ldrb	r3, [r7, #31]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3720      	adds	r7, #32
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08c      	sub	sp, #48	; 0x30
 8003ae8:	af02      	add	r7, sp, #8
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	4613      	mov	r3, r2
 8003af0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	785b      	ldrb	r3, [r3, #1]
 8003afa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8003afc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b00:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d02d      	beq.n	8003b6a <USB_HC_StartXfer+0x86>
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	791b      	ldrb	r3, [r3, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d129      	bne.n	8003b6a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8003b16:	79fb      	ldrb	r3, [r7, #7]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d117      	bne.n	8003b4c <USB_HC_StartXfer+0x68>
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	79db      	ldrb	r3, [r3, #7]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <USB_HC_StartXfer+0x48>
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	79db      	ldrb	r3, [r3, #7]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d10f      	bne.n	8003b4c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	69fa      	ldr	r2, [r7, #28]
 8003b3c:	0151      	lsls	r1, r2, #5
 8003b3e:	6a3a      	ldr	r2, [r7, #32]
 8003b40:	440a      	add	r2, r1
 8003b42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b4a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10b      	bne.n	8003b6a <USB_HC_StartXfer+0x86>
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	795b      	ldrb	r3, [r3, #5]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d107      	bne.n	8003b6a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	785b      	ldrb	r3, [r3, #1]
 8003b5e:	4619      	mov	r1, r3
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 fa0f 	bl	8003f84 <USB_DoPing>
      return HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	e0f8      	b.n	8003d5c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d018      	beq.n	8003ba4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	8912      	ldrh	r2, [r2, #8]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	8912      	ldrh	r2, [r2, #8]
 8003b82:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b86:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8003b88:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003b8a:	8b7b      	ldrh	r3, [r7, #26]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d90b      	bls.n	8003ba8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8003b90:	8b7b      	ldrh	r3, [r7, #26]
 8003b92:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8003b94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	8912      	ldrh	r2, [r2, #8]
 8003b9a:	fb03 f202 	mul.w	r2, r3, r2
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	611a      	str	r2, [r3, #16]
 8003ba2:	e001      	b.n	8003ba8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	78db      	ldrb	r3, [r3, #3]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d007      	beq.n	8003bc0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8003bb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	8912      	ldrh	r2, [r2, #8]
 8003bb6:	fb03 f202 	mul.w	r2, r3, r2
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	611a      	str	r2, [r3, #16]
 8003bbe:	e003      	b.n	8003bc8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	695a      	ldr	r2, [r3, #20]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003bd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003bd2:	04d9      	lsls	r1, r3, #19
 8003bd4:	4b63      	ldr	r3, [pc, #396]	; (8003d64 <USB_HC_StartXfer+0x280>)
 8003bd6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003bd8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	7a9b      	ldrb	r3, [r3, #10]
 8003bde:	075b      	lsls	r3, r3, #29
 8003be0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003be4:	69f9      	ldr	r1, [r7, #28]
 8003be6:	0148      	lsls	r0, r1, #5
 8003be8:	6a39      	ldr	r1, [r7, #32]
 8003bea:	4401      	add	r1, r0
 8003bec:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003bf0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003bf2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8003bf4:	79fb      	ldrb	r3, [r7, #7]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d009      	beq.n	8003c0e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	68d9      	ldr	r1, [r3, #12]
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c0a:	460a      	mov	r2, r1
 8003c0c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	bf0c      	ite	eq
 8003c1e:	2301      	moveq	r3, #1
 8003c20:	2300      	movne	r3, #0
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	015a      	lsls	r2, r3, #5
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	0151      	lsls	r1, r2, #5
 8003c38:	6a3a      	ldr	r2, [r7, #32]
 8003c3a:	440a      	add	r2, r1
 8003c3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c40:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003c44:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	015a      	lsls	r2, r3, #5
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	7e7b      	ldrb	r3, [r7, #25]
 8003c56:	075b      	lsls	r3, r3, #29
 8003c58:	69f9      	ldr	r1, [r7, #28]
 8003c5a:	0148      	lsls	r0, r1, #5
 8003c5c:	6a39      	ldr	r1, [r7, #32]
 8003c5e:	4401      	add	r1, r0
 8003c60:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8003c64:	4313      	orrs	r3, r2
 8003c66:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c7e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	78db      	ldrb	r3, [r3, #3]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d004      	beq.n	8003c92 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c8e:	613b      	str	r3, [r7, #16]
 8003c90:	e003      	b.n	8003c9a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c98:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ca0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cae:	461a      	mov	r2, r3
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8003cb4:	79fb      	ldrb	r3, [r7, #7]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	e04e      	b.n	8003d5c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	78db      	ldrb	r3, [r3, #3]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d149      	bne.n	8003d5a <USB_HC_StartXfer+0x276>
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d045      	beq.n	8003d5a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	79db      	ldrb	r3, [r3, #7]
 8003cd2:	2b03      	cmp	r3, #3
 8003cd4:	d830      	bhi.n	8003d38 <USB_HC_StartXfer+0x254>
 8003cd6:	a201      	add	r2, pc, #4	; (adr r2, 8003cdc <USB_HC_StartXfer+0x1f8>)
 8003cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cdc:	08003ced 	.word	0x08003ced
 8003ce0:	08003d11 	.word	0x08003d11
 8003ce4:	08003ced 	.word	0x08003ced
 8003ce8:	08003d11 	.word	0x08003d11
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	3303      	adds	r3, #3
 8003cf2:	089b      	lsrs	r3, r3, #2
 8003cf4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8003cf6:	8afa      	ldrh	r2, [r7, #22]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d91c      	bls.n	8003d3c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	f043 0220 	orr.w	r2, r3, #32
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	619a      	str	r2, [r3, #24]
        }
        break;
 8003d0e:	e015      	b.n	8003d3c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	3303      	adds	r3, #3
 8003d16:	089b      	lsrs	r3, r3, #2
 8003d18:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8003d1a:	8afa      	ldrh	r2, [r7, #22]
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d90a      	bls.n	8003d40 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	619a      	str	r2, [r3, #24]
        }
        break;
 8003d36:	e003      	b.n	8003d40 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8003d38:	bf00      	nop
 8003d3a:	e002      	b.n	8003d42 <USB_HC_StartXfer+0x25e>
        break;
 8003d3c:	bf00      	nop
 8003d3e:	e000      	b.n	8003d42 <USB_HC_StartXfer+0x25e>
        break;
 8003d40:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	68d9      	ldr	r1, [r3, #12]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	785a      	ldrb	r2, [r3, #1]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2000      	movs	r0, #0
 8003d52:	9000      	str	r0, [sp, #0]
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f7ff fb5b 	bl	8003410 <USB_WritePacket>
  }

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3728      	adds	r7, #40	; 0x28
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	1ff80000 	.word	0x1ff80000

08003d68 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	b29b      	uxth	r3, r3
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b089      	sub	sp, #36	; 0x24
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	460b      	mov	r3, r1
 8003d94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8003d9a:	78fb      	ldrb	r3, [r7, #3]
 8003d9c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	0c9b      	lsrs	r3, r3, #18
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	0fdb      	lsrs	r3, r3, #31
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 0320 	and.w	r3, r3, #32
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	d104      	bne.n	8003de4 <USB_HC_Halt+0x5a>
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	e0c8      	b.n	8003f76 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <USB_HC_Halt+0x66>
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d163      	bne.n	8003eb8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	0151      	lsls	r1, r2, #5
 8003e02:	69fa      	ldr	r2, [r7, #28]
 8003e04:	440a      	add	r2, r1
 8003e06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e0e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 0320 	and.w	r3, r3, #32
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f040 80ab 	bne.w	8003f74 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d133      	bne.n	8003e92 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	0151      	lsls	r1, r2, #5
 8003e3c:	69fa      	ldr	r2, [r7, #28]
 8003e3e:	440a      	add	r2, r1
 8003e40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e48:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	0151      	lsls	r1, r2, #5
 8003e5c:	69fa      	ldr	r2, [r7, #28]
 8003e5e:	440a      	add	r2, r1
 8003e60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e68:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e76:	d81d      	bhi.n	8003eb4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e8e:	d0ec      	beq.n	8003e6a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003e90:	e070      	b.n	8003f74 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	0151      	lsls	r1, r2, #5
 8003ea4:	69fa      	ldr	r2, [r7, #28]
 8003ea6:	440a      	add	r2, r1
 8003ea8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003eac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003eb0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003eb2:	e05f      	b.n	8003f74 <USB_HC_Halt+0x1ea>
            break;
 8003eb4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003eb6:	e05d      	b.n	8003f74 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	0151      	lsls	r1, r2, #5
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	440a      	add	r2, r1
 8003ece:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ed2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ed6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d133      	bne.n	8003f50 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	0151      	lsls	r1, r2, #5
 8003efa:	69fa      	ldr	r2, [r7, #28]
 8003efc:	440a      	add	r2, r1
 8003efe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f06:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	0151      	lsls	r1, r2, #5
 8003f1a:	69fa      	ldr	r2, [r7, #28]
 8003f1c:	440a      	add	r2, r1
 8003f1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f26:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f34:	d81d      	bhi.n	8003f72 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	015a      	lsls	r2, r3, #5
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f4c:	d0ec      	beq.n	8003f28 <USB_HC_Halt+0x19e>
 8003f4e:	e011      	b.n	8003f74 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	0151      	lsls	r1, r2, #5
 8003f62:	69fa      	ldr	r2, [r7, #28]
 8003f64:	440a      	add	r2, r1
 8003f66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f6e:	6013      	str	r3, [r2, #0]
 8003f70:	e000      	b.n	8003f74 <USB_HC_Halt+0x1ea>
          break;
 8003f72:	bf00      	nop
    }
  }

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3724      	adds	r7, #36	; 0x24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
	...

08003f84 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	04da      	lsls	r2, r3, #19
 8003fa0:	4b15      	ldr	r3, [pc, #84]	; (8003ff8 <USB_DoPing+0x74>)
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	0151      	lsls	r1, r2, #5
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	440a      	add	r2, r1
 8003fac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003fb4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003fcc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003fd4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	015a      	lsls	r2, r3, #5
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	4413      	add	r3, r2
 8003fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	371c      	adds	r7, #28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	1ff80000 	.word	0x1ff80000

08003ffc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff f93b 	bl	800328c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004016:	2110      	movs	r1, #16
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7ff f995 	bl	8003348 <USB_FlushTxFifo>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff f9c1 	bl	80033b0 <USB_FlushRxFifo>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004038:	2300      	movs	r3, #0
 800403a:	61bb      	str	r3, [r7, #24]
 800403c:	e01f      	b.n	800407e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	015a      	lsls	r2, r3, #5
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	4413      	add	r3, r2
 8004046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004054:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800405c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004064:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	4413      	add	r3, r2
 800406e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004072:	461a      	mov	r2, r3
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	3301      	adds	r3, #1
 800407c:	61bb      	str	r3, [r7, #24]
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	2b0f      	cmp	r3, #15
 8004082:	d9dc      	bls.n	800403e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004084:	2300      	movs	r3, #0
 8004086:	61bb      	str	r3, [r7, #24]
 8004088:	e034      	b.n	80040f4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	4413      	add	r3, r2
 8004092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040a0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80040b0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040be:	461a      	mov	r2, r3
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	3301      	adds	r3, #1
 80040c8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040d0:	d80c      	bhi.n	80040ec <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	015a      	lsls	r2, r3, #5
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040e8:	d0ec      	beq.n	80040c4 <USB_StopHost+0xc8>
 80040ea:	e000      	b.n	80040ee <USB_StopHost+0xf2>
        break;
 80040ec:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	3301      	adds	r3, #1
 80040f2:	61bb      	str	r3, [r7, #24]
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	2b0f      	cmp	r3, #15
 80040f8:	d9c7      	bls.n	800408a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004100:	461a      	mov	r2, r3
 8004102:	f04f 33ff 	mov.w	r3, #4294967295
 8004106:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f04f 32ff 	mov.w	r2, #4294967295
 800410e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff f8aa 	bl	800326a <USB_EnableGlobalInt>

  return ret;
 8004116:	7ffb      	ldrb	r3, [r7, #31]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3720      	adds	r7, #32
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8004120:	b590      	push	{r4, r7, lr}
 8004122:	b089      	sub	sp, #36	; 0x24
 8004124:	af04      	add	r7, sp, #16
 8004126:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8004128:	2301      	movs	r3, #1
 800412a:	2202      	movs	r2, #2
 800412c:	2102      	movs	r1, #2
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fc66 	bl	8004a00 <USBH_FindInterface>
 8004134:	4603      	mov	r3, r0
 8004136:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8004138:	7bfb      	ldrb	r3, [r7, #15]
 800413a:	2bff      	cmp	r3, #255	; 0xff
 800413c:	d002      	beq.n	8004144 <USBH_CDC_InterfaceInit+0x24>
 800413e:	7bfb      	ldrb	r3, [r7, #15]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d901      	bls.n	8004148 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8004144:	2302      	movs	r3, #2
 8004146:	e13d      	b.n	80043c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	4619      	mov	r1, r3
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 fc3b 	bl	80049c8 <USBH_SelectInterface>
 8004152:	4603      	mov	r3, r0
 8004154:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8004156:	7bbb      	ldrb	r3, [r7, #14]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800415c:	2302      	movs	r3, #2
 800415e:	e131      	b.n	80043c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8004166:	2050      	movs	r0, #80	; 0x50
 8004168:	f001 fb12 	bl	8005790 <malloc>
 800416c:	4603      	mov	r3, r0
 800416e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8004180:	2302      	movs	r3, #2
 8004182:	e11f      	b.n	80043c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8004184:	2250      	movs	r2, #80	; 0x50
 8004186:	2100      	movs	r1, #0
 8004188:	68b8      	ldr	r0, [r7, #8]
 800418a:	f001 fb11 	bl	80057b0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	211a      	movs	r1, #26
 8004194:	fb01 f303 	mul.w	r3, r1, r3
 8004198:	4413      	add	r3, r2
 800419a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	b25b      	sxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	da15      	bge.n	80041d2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	211a      	movs	r1, #26
 80041ac:	fb01 f303 	mul.w	r3, r1, r3
 80041b0:	4413      	add	r3, r2
 80041b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80041b6:	781a      	ldrb	r2, [r3, #0]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	211a      	movs	r1, #26
 80041c2:	fb01 f303 	mul.w	r3, r1, r3
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80041cc:	881a      	ldrh	r2, [r3, #0]
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	785b      	ldrb	r3, [r3, #1]
 80041d6:	4619      	mov	r1, r3
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 ff9c 	bl	8005116 <USBH_AllocPipe>
 80041de:	4603      	mov	r3, r0
 80041e0:	461a      	mov	r2, r3
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	7819      	ldrb	r1, [r3, #0]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	7858      	ldrb	r0, [r3, #1]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	8952      	ldrh	r2, [r2, #10]
 80041fe:	9202      	str	r2, [sp, #8]
 8004200:	2203      	movs	r2, #3
 8004202:	9201      	str	r2, [sp, #4]
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	4623      	mov	r3, r4
 8004208:	4602      	mov	r2, r0
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 ff54 	bl	80050b8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	2200      	movs	r2, #0
 8004216:	4619      	mov	r1, r3
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f001 fa17 	bl	800564c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800421e:	2300      	movs	r3, #0
 8004220:	2200      	movs	r2, #0
 8004222:	210a      	movs	r1, #10
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 fbeb 	bl	8004a00 <USBH_FindInterface>
 800422a:	4603      	mov	r3, r0
 800422c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800422e:	7bfb      	ldrb	r3, [r7, #15]
 8004230:	2bff      	cmp	r3, #255	; 0xff
 8004232:	d002      	beq.n	800423a <USBH_CDC_InterfaceInit+0x11a>
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d901      	bls.n	800423e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800423a:	2302      	movs	r3, #2
 800423c:	e0c2      	b.n	80043c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800423e:	7bfb      	ldrb	r3, [r7, #15]
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	211a      	movs	r1, #26
 8004244:	fb01 f303 	mul.w	r3, r1, r3
 8004248:	4413      	add	r3, r2
 800424a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	b25b      	sxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	da16      	bge.n	8004284 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004256:	7bfb      	ldrb	r3, [r7, #15]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	211a      	movs	r1, #26
 800425c:	fb01 f303 	mul.w	r3, r1, r3
 8004260:	4413      	add	r3, r2
 8004262:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004266:	781a      	ldrb	r2, [r3, #0]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800426c:	7bfb      	ldrb	r3, [r7, #15]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	211a      	movs	r1, #26
 8004272:	fb01 f303 	mul.w	r3, r1, r3
 8004276:	4413      	add	r3, r2
 8004278:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800427c:	881a      	ldrh	r2, [r3, #0]
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	835a      	strh	r2, [r3, #26]
 8004282:	e015      	b.n	80042b0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004284:	7bfb      	ldrb	r3, [r7, #15]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	211a      	movs	r1, #26
 800428a:	fb01 f303 	mul.w	r3, r1, r3
 800428e:	4413      	add	r3, r2
 8004290:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004294:	781a      	ldrb	r2, [r3, #0]
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800429a:	7bfb      	ldrb	r3, [r7, #15]
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	211a      	movs	r1, #26
 80042a0:	fb01 f303 	mul.w	r3, r1, r3
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80042aa:	881a      	ldrh	r2, [r3, #0]
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	211a      	movs	r1, #26
 80042b6:	fb01 f303 	mul.w	r3, r1, r3
 80042ba:	4413      	add	r3, r2
 80042bc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	b25b      	sxtb	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	da16      	bge.n	80042f6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	211a      	movs	r1, #26
 80042ce:	fb01 f303 	mul.w	r3, r1, r3
 80042d2:	4413      	add	r3, r2
 80042d4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80042d8:	781a      	ldrb	r2, [r3, #0]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80042de:	7bfb      	ldrb	r3, [r7, #15]
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	211a      	movs	r1, #26
 80042e4:	fb01 f303 	mul.w	r3, r1, r3
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80042ee:	881a      	ldrh	r2, [r3, #0]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	835a      	strh	r2, [r3, #26]
 80042f4:	e015      	b.n	8004322 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80042f6:	7bfb      	ldrb	r3, [r7, #15]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	211a      	movs	r1, #26
 80042fc:	fb01 f303 	mul.w	r3, r1, r3
 8004300:	4413      	add	r3, r2
 8004302:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004306:	781a      	ldrb	r2, [r3, #0]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800430c:	7bfb      	ldrb	r3, [r7, #15]
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	211a      	movs	r1, #26
 8004312:	fb01 f303 	mul.w	r3, r1, r3
 8004316:	4413      	add	r3, r2
 8004318:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800431c:	881a      	ldrh	r2, [r3, #0]
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	7b9b      	ldrb	r3, [r3, #14]
 8004326:	4619      	mov	r1, r3
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 fef4 	bl	8005116 <USBH_AllocPipe>
 800432e:	4603      	mov	r3, r0
 8004330:	461a      	mov	r2, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	7bdb      	ldrb	r3, [r3, #15]
 800433a:	4619      	mov	r1, r3
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 feea 	bl	8005116 <USBH_AllocPipe>
 8004342:	4603      	mov	r3, r0
 8004344:	461a      	mov	r2, r3
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	7b59      	ldrb	r1, [r3, #13]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	7b98      	ldrb	r0, [r3, #14]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	8b12      	ldrh	r2, [r2, #24]
 8004362:	9202      	str	r2, [sp, #8]
 8004364:	2202      	movs	r2, #2
 8004366:	9201      	str	r2, [sp, #4]
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	4623      	mov	r3, r4
 800436c:	4602      	mov	r2, r0
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fea2 	bl	80050b8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	7b19      	ldrb	r1, [r3, #12]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	7bd8      	ldrb	r0, [r3, #15]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	8b52      	ldrh	r2, [r2, #26]
 800438c:	9202      	str	r2, [sp, #8]
 800438e:	2202      	movs	r2, #2
 8004390:	9201      	str	r2, [sp, #4]
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	4623      	mov	r3, r4
 8004396:	4602      	mov	r2, r0
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 fe8d 	bl	80050b8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	7b5b      	ldrb	r3, [r3, #13]
 80043aa:	2200      	movs	r2, #0
 80043ac:	4619      	mov	r1, r3
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f001 f94c 	bl	800564c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	7b1b      	ldrb	r3, [r3, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	4619      	mov	r1, r3
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f001 f945 	bl	800564c <USBH_LL_SetToggle>

  return USBH_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd90      	pop	{r4, r7, pc}

080043cc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00e      	beq.n	8004404 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	4619      	mov	r1, r3
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 fe82 	bl	80050f6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	4619      	mov	r1, r3
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 fead 	bl	8005158 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	7b1b      	ldrb	r3, [r3, #12]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00e      	beq.n	800442a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	7b1b      	ldrb	r3, [r3, #12]
 8004410:	4619      	mov	r1, r3
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 fe6f 	bl	80050f6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	7b1b      	ldrb	r3, [r3, #12]
 800441c:	4619      	mov	r1, r3
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 fe9a 	bl	8005158 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	7b5b      	ldrb	r3, [r3, #13]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00e      	beq.n	8004450 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	7b5b      	ldrb	r3, [r3, #13]
 8004436:	4619      	mov	r1, r3
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 fe5c 	bl	80050f6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	7b5b      	ldrb	r3, [r3, #13]
 8004442:	4619      	mov	r1, r3
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 fe87 	bl	8005158 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00b      	beq.n	8004474 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	4618      	mov	r0, r3
 8004466:	f001 f99b 	bl	80057a0 <free>
    phost->pActiveClass->pData = 0U;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004470:	2200      	movs	r2, #0
 8004472:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b084      	sub	sp, #16
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	3340      	adds	r3, #64	; 0x40
 8004494:	4619      	mov	r1, r3
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f8b1 	bl	80045fe <GetLineCoding>
 800449c:	4603      	mov	r3, r0
 800449e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80044a0:	7afb      	ldrb	r3, [r7, #11]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d105      	bne.n	80044b2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80044ac:	2102      	movs	r1, #2
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80044b2:	7afb      	ldrb	r3, [r7, #11]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80044c4:	2301      	movs	r3, #1
 80044c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80044dc:	2b04      	cmp	r3, #4
 80044de:	d877      	bhi.n	80045d0 <USBH_CDC_Process+0x114>
 80044e0:	a201      	add	r2, pc, #4	; (adr r2, 80044e8 <USBH_CDC_Process+0x2c>)
 80044e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e6:	bf00      	nop
 80044e8:	080044fd 	.word	0x080044fd
 80044ec:	08004503 	.word	0x08004503
 80044f0:	08004533 	.word	0x08004533
 80044f4:	080045a7 	.word	0x080045a7
 80044f8:	080045b5 	.word	0x080045b5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004500:	e06d      	b.n	80045de <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004506:	4619      	mov	r1, r3
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f897 	bl	800463c <SetLineCoding>
 800450e:	4603      	mov	r3, r0
 8004510:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004512:	7bbb      	ldrb	r3, [r7, #14]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d104      	bne.n	8004522 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8004520:	e058      	b.n	80045d4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8004522:	7bbb      	ldrb	r3, [r7, #14]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d055      	beq.n	80045d4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2204      	movs	r2, #4
 800452c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8004530:	e050      	b.n	80045d4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	3340      	adds	r3, #64	; 0x40
 8004536:	4619      	mov	r1, r3
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f860 	bl	80045fe <GetLineCoding>
 800453e:	4603      	mov	r3, r0
 8004540:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004542:	7bbb      	ldrb	r3, [r7, #14]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d126      	bne.n	8004596 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800455a:	791b      	ldrb	r3, [r3, #4]
 800455c:	429a      	cmp	r2, r3
 800455e:	d13b      	bne.n	80045d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800456a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800456c:	429a      	cmp	r2, r3
 800456e:	d133      	bne.n	80045d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800457a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800457c:	429a      	cmp	r2, r3
 800457e:	d12b      	bne.n	80045d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004588:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800458a:	429a      	cmp	r2, r3
 800458c:	d124      	bne.n	80045d8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f958 	bl	8004844 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8004594:	e020      	b.n	80045d8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8004596:	7bbb      	ldrb	r3, [r7, #14]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d01d      	beq.n	80045d8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2204      	movs	r2, #4
 80045a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80045a4:	e018      	b.n	80045d8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f867 	bl	800467a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f8da 	bl	8004766 <CDC_ProcessReception>
      break;
 80045b2:	e014      	b.n	80045de <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80045b4:	2100      	movs	r1, #0
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fb08 	bl	8004bcc <USBH_ClrFeature>
 80045bc:	4603      	mov	r3, r0
 80045be:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80045c0:	7bbb      	ldrb	r3, [r7, #14]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10a      	bne.n	80045dc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80045ce:	e005      	b.n	80045dc <USBH_CDC_Process+0x120>

    default:
      break;
 80045d0:	bf00      	nop
 80045d2:	e004      	b.n	80045de <USBH_CDC_Process+0x122>
      break;
 80045d4:	bf00      	nop
 80045d6:	e002      	b.n	80045de <USBH_CDC_Process+0x122>
      break;
 80045d8:	bf00      	nop
 80045da:	e000      	b.n	80045de <USBH_CDC_Process+0x122>
      break;
 80045dc:	bf00      	nop

  }

  return status;
 80045de:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b082      	sub	sp, #8
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
 8004606:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	22a1      	movs	r2, #161	; 0xa1
 800460c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2221      	movs	r2, #33	; 0x21
 8004612:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2207      	movs	r2, #7
 8004624:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2207      	movs	r2, #7
 800462a:	4619      	mov	r1, r3
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 faf1 	bl	8004c14 <USBH_CtlReq>
 8004632:	4603      	mov	r3, r0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2221      	movs	r2, #33	; 0x21
 800464a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2220      	movs	r2, #32
 8004650:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2207      	movs	r2, #7
 8004662:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2207      	movs	r2, #7
 8004668:	4619      	mov	r1, r3
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fad2 	bl	8004c14 <USBH_CtlReq>
 8004670:	4603      	mov	r3, r0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b086      	sub	sp, #24
 800467e:	af02      	add	r7, sp, #8
 8004680:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800468c:	2300      	movs	r3, #0
 800468e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004696:	2b01      	cmp	r3, #1
 8004698:	d002      	beq.n	80046a0 <CDC_ProcessTransmission+0x26>
 800469a:	2b02      	cmp	r3, #2
 800469c:	d023      	beq.n	80046e6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800469e:	e05e      	b.n	800475e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	8b12      	ldrh	r2, [r2, #24]
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d90b      	bls.n	80046c4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	69d9      	ldr	r1, [r3, #28]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8b1a      	ldrh	r2, [r3, #24]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	7b5b      	ldrb	r3, [r3, #13]
 80046b8:	2001      	movs	r0, #1
 80046ba:	9000      	str	r0, [sp, #0]
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 fcb8 	bl	8005032 <USBH_BulkSendData>
 80046c2:	e00b      	b.n	80046dc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	7b5b      	ldrb	r3, [r3, #13]
 80046d2:	2001      	movs	r0, #1
 80046d4:	9000      	str	r0, [sp, #0]
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 fcab 	bl	8005032 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80046e4:	e03b      	b.n	800475e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	7b5b      	ldrb	r3, [r3, #13]
 80046ea:	4619      	mov	r1, r3
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 ff83 	bl	80055f8 <USBH_LL_GetURBState>
 80046f2:	4603      	mov	r3, r0
 80046f4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80046f6:	7afb      	ldrb	r3, [r7, #11]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d128      	bne.n	800474e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	8b12      	ldrh	r2, [r2, #24]
 8004704:	4293      	cmp	r3, r2
 8004706:	d90e      	bls.n	8004726 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	8b12      	ldrh	r2, [r2, #24]
 8004710:	1a9a      	subs	r2, r3, r2
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	8b12      	ldrh	r2, [r2, #24]
 800471e:	441a      	add	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	61da      	str	r2, [r3, #28]
 8004724:	e002      	b.n	800472c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	2b00      	cmp	r3, #0
 8004732:	d004      	beq.n	800473e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800473c:	e00e      	b.n	800475c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f868 	bl	800481c <USBH_CDC_TransmitCallback>
      break;
 800474c:	e006      	b.n	800475c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800474e:	7afb      	ldrb	r3, [r7, #11]
 8004750:	2b02      	cmp	r3, #2
 8004752:	d103      	bne.n	800475c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800475c:	bf00      	nop
  }
}
 800475e:	bf00      	nop
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b086      	sub	sp, #24
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004778:	2300      	movs	r3, #0
 800477a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8004782:	2b03      	cmp	r3, #3
 8004784:	d002      	beq.n	800478c <CDC_ProcessReception+0x26>
 8004786:	2b04      	cmp	r3, #4
 8004788:	d00e      	beq.n	80047a8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800478a:	e043      	b.n	8004814 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	6a19      	ldr	r1, [r3, #32]
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	8b5a      	ldrh	r2, [r3, #26]
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	7b1b      	ldrb	r3, [r3, #12]
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 fc6f 	bl	800507c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2204      	movs	r2, #4
 80047a2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80047a6:	e035      	b.n	8004814 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	7b1b      	ldrb	r3, [r3, #12]
 80047ac:	4619      	mov	r1, r3
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 ff22 	bl	80055f8 <USBH_LL_GetURBState>
 80047b4:	4603      	mov	r3, r0
 80047b6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80047b8:	7cfb      	ldrb	r3, [r7, #19]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d129      	bne.n	8004812 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	7b1b      	ldrb	r3, [r3, #12]
 80047c2:	4619      	mov	r1, r3
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 fe85 	bl	80054d4 <USBH_LL_GetLastXferSize>
 80047ca:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d016      	beq.n	8004804 <CDC_ProcessReception+0x9e>
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	8b5b      	ldrh	r3, [r3, #26]
 80047da:	461a      	mov	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4293      	cmp	r3, r2
 80047e0:	d910      	bls.n	8004804 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	1ad2      	subs	r2, r2, r3
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	6a1a      	ldr	r2, [r3, #32]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	441a      	add	r2, r3
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2203      	movs	r2, #3
 80047fe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8004802:	e006      	b.n	8004812 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f80f 	bl	8004830 <USBH_CDC_ReceiveCallback>
      break;
 8004812:	bf00      	nop
  }
}
 8004814:	bf00      	nop
 8004816:	3718      	adds	r7, #24
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	4613      	mov	r3, r2
 8004864:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800486c:	2302      	movs	r3, #2
 800486e:	e029      	b.n	80048c4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	79fa      	ldrb	r2, [r7, #7]
 8004874:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 f81f 	bl	80048cc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 fd97 	bl	80053f0 <USBH_LL_Init>

  return USBH_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80048d8:	2300      	movs	r3, #0
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	e009      	b.n	80048f2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	33e0      	adds	r3, #224	; 0xe0
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	2200      	movs	r2, #0
 80048ea:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	3301      	adds	r3, #1
 80048f0:	60fb      	str	r3, [r7, #12]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2b0f      	cmp	r3, #15
 80048f6:	d9f2      	bls.n	80048de <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80048f8:	2300      	movs	r3, #0
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	e009      	b.n	8004912 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4413      	add	r3, r2
 8004904:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8004908:	2200      	movs	r2, #0
 800490a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	3301      	adds	r3, #1
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004918:	d3f1      	bcc.n	80048fe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2240      	movs	r2, #64	; 0x40
 800493e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d016      	beq.n	80049b6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10e      	bne.n	80049b0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004998:	1c59      	adds	r1, r3, #1
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	33de      	adds	r3, #222	; 0xde
 80049a4:	6839      	ldr	r1, [r7, #0]
 80049a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80049aa:	2300      	movs	r3, #0
 80049ac:	73fb      	strb	r3, [r7, #15]
 80049ae:	e004      	b.n	80049ba <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80049b0:	2302      	movs	r3, #2
 80049b2:	73fb      	strb	r3, [r7, #15]
 80049b4:	e001      	b.n	80049ba <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80049b6:	2302      	movs	r3, #2
 80049b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80049ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80049d4:	2300      	movs	r3, #0
 80049d6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80049de:	78fa      	ldrb	r2, [r7, #3]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d204      	bcs.n	80049ee <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	78fa      	ldrb	r2, [r7, #3]
 80049e8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80049ec:	e001      	b.n	80049f2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80049ee:	2302      	movs	r3, #2
 80049f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	4608      	mov	r0, r1
 8004a0a:	4611      	mov	r1, r2
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	4603      	mov	r3, r0
 8004a10:	70fb      	strb	r3, [r7, #3]
 8004a12:	460b      	mov	r3, r1
 8004a14:	70bb      	strb	r3, [r7, #2]
 8004a16:	4613      	mov	r3, r2
 8004a18:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8004a28:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8004a2a:	e025      	b.n	8004a78 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8004a2c:	7dfb      	ldrb	r3, [r7, #23]
 8004a2e:	221a      	movs	r2, #26
 8004a30:	fb02 f303 	mul.w	r3, r2, r3
 8004a34:	3308      	adds	r3, #8
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4413      	add	r3, r2
 8004a3a:	3302      	adds	r3, #2
 8004a3c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	795b      	ldrb	r3, [r3, #5]
 8004a42:	78fa      	ldrb	r2, [r7, #3]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d002      	beq.n	8004a4e <USBH_FindInterface+0x4e>
 8004a48:	78fb      	ldrb	r3, [r7, #3]
 8004a4a:	2bff      	cmp	r3, #255	; 0xff
 8004a4c:	d111      	bne.n	8004a72 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8004a52:	78ba      	ldrb	r2, [r7, #2]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d002      	beq.n	8004a5e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004a58:	78bb      	ldrb	r3, [r7, #2]
 8004a5a:	2bff      	cmp	r3, #255	; 0xff
 8004a5c:	d109      	bne.n	8004a72 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004a62:	787a      	ldrb	r2, [r7, #1]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d002      	beq.n	8004a6e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8004a68:	787b      	ldrb	r3, [r7, #1]
 8004a6a:	2bff      	cmp	r3, #255	; 0xff
 8004a6c:	d101      	bne.n	8004a72 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8004a6e:	7dfb      	ldrb	r3, [r7, #23]
 8004a70:	e006      	b.n	8004a80 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8004a72:	7dfb      	ldrb	r3, [r7, #23]
 8004a74:	3301      	adds	r3, #1
 8004a76:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8004a78:	7dfb      	ldrb	r3, [r7, #23]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d9d6      	bls.n	8004a2c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8004a7e:	23ff      	movs	r3, #255	; 0xff
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	371c      	adds	r7, #28
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 fce7 	bl	8005468 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 fdbe 	bl	800561e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3708      	adds	r7, #8
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b082      	sub	sp, #8
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f804 	bl	8004aee <USBH_HandleSof>
}
 8004ae6:	bf00      	nop
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b082      	sub	sp, #8
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b0b      	cmp	r3, #11
 8004afe:	d10a      	bne.n	8004b16 <USBH_HandleSof+0x28>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d005      	beq.n	8004b16 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	4798      	blx	r3
  }
}
 8004b16:	bf00      	nop
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8004b2e:	bf00      	nop
}
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8004b4a:	bf00      	nop
}
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b083      	sub	sp, #12
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 fc7a 	bl	800549e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	791b      	ldrb	r3, [r3, #4]
 8004bae:	4619      	mov	r1, r3
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 fad1 	bl	8005158 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	795b      	ldrb	r3, [r3, #5]
 8004bba:	4619      	mov	r1, r3
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 facb 	bl	8005158 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	789b      	ldrb	r3, [r3, #2]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d10f      	bne.n	8004c00 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8004bf2:	78fb      	ldrb	r3, [r7, #3]
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8004c00:	2200      	movs	r2, #0
 8004c02:	2100      	movs	r1, #0
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 f805 	bl	8004c14 <USBH_CtlReq>
 8004c0a:	4603      	mov	r3, r0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8004c22:	2301      	movs	r3, #1
 8004c24:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	789b      	ldrb	r3, [r3, #2]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d002      	beq.n	8004c34 <USBH_CtlReq+0x20>
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d00f      	beq.n	8004c52 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8004c32:	e027      	b.n	8004c84 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	88fa      	ldrh	r2, [r7, #6]
 8004c3e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2201      	movs	r2, #1
 8004c44:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2202      	movs	r2, #2
 8004c4a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c50:	e018      	b.n	8004c84 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 f81c 	bl	8004c90 <USBH_HandleControl>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8004c5c:	7dfb      	ldrb	r3, [r7, #23]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <USBH_CtlReq+0x54>
 8004c62:	7dfb      	ldrb	r3, [r7, #23]
 8004c64:	2b03      	cmp	r3, #3
 8004c66:	d106      	bne.n	8004c76 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	761a      	strb	r2, [r3, #24]
      break;
 8004c74:	e005      	b.n	8004c82 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8004c76:	7dfb      	ldrb	r3, [r7, #23]
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d102      	bne.n	8004c82 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	709a      	strb	r2, [r3, #2]
      break;
 8004c82:	bf00      	nop
  }
  return status;
 8004c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
	...

08004c90 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af02      	add	r7, sp, #8
 8004c96:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	7e1b      	ldrb	r3, [r3, #24]
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	2b0a      	cmp	r3, #10
 8004ca8:	f200 8156 	bhi.w	8004f58 <USBH_HandleControl+0x2c8>
 8004cac:	a201      	add	r2, pc, #4	; (adr r2, 8004cb4 <USBH_HandleControl+0x24>)
 8004cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb2:	bf00      	nop
 8004cb4:	08004ce1 	.word	0x08004ce1
 8004cb8:	08004cfb 	.word	0x08004cfb
 8004cbc:	08004d65 	.word	0x08004d65
 8004cc0:	08004d8b 	.word	0x08004d8b
 8004cc4:	08004dc3 	.word	0x08004dc3
 8004cc8:	08004ded 	.word	0x08004ded
 8004ccc:	08004e3f 	.word	0x08004e3f
 8004cd0:	08004e61 	.word	0x08004e61
 8004cd4:	08004e9d 	.word	0x08004e9d
 8004cd8:	08004ec3 	.word	0x08004ec3
 8004cdc:	08004f01 	.word	0x08004f01
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f103 0110 	add.w	r1, r3, #16
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	795b      	ldrb	r3, [r3, #5]
 8004cea:	461a      	mov	r2, r3
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f943 	bl	8004f78 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	761a      	strb	r2, [r3, #24]
      break;
 8004cf8:	e139      	b.n	8004f6e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	795b      	ldrb	r3, [r3, #5]
 8004cfe:	4619      	mov	r1, r3
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fc79 	bl	80055f8 <USBH_LL_GetURBState>
 8004d06:	4603      	mov	r3, r0
 8004d08:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8004d0a:	7bbb      	ldrb	r3, [r7, #14]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d11e      	bne.n	8004d4e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	7c1b      	ldrb	r3, [r3, #16]
 8004d14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004d18:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	8adb      	ldrh	r3, [r3, #22]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00a      	beq.n	8004d38 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8004d22:	7b7b      	ldrb	r3, [r7, #13]
 8004d24:	2b80      	cmp	r3, #128	; 0x80
 8004d26:	d103      	bne.n	8004d30 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2203      	movs	r2, #3
 8004d2c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8004d2e:	e115      	b.n	8004f5c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2205      	movs	r2, #5
 8004d34:	761a      	strb	r2, [r3, #24]
      break;
 8004d36:	e111      	b.n	8004f5c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8004d38:	7b7b      	ldrb	r3, [r7, #13]
 8004d3a:	2b80      	cmp	r3, #128	; 0x80
 8004d3c:	d103      	bne.n	8004d46 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2209      	movs	r2, #9
 8004d42:	761a      	strb	r2, [r3, #24]
      break;
 8004d44:	e10a      	b.n	8004f5c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2207      	movs	r2, #7
 8004d4a:	761a      	strb	r2, [r3, #24]
      break;
 8004d4c:	e106      	b.n	8004f5c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8004d4e:	7bbb      	ldrb	r3, [r7, #14]
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	d003      	beq.n	8004d5c <USBH_HandleControl+0xcc>
 8004d54:	7bbb      	ldrb	r3, [r7, #14]
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	f040 8100 	bne.w	8004f5c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	220b      	movs	r2, #11
 8004d60:	761a      	strb	r2, [r3, #24]
      break;
 8004d62:	e0fb      	b.n	8004f5c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6899      	ldr	r1, [r3, #8]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	899a      	ldrh	r2, [r3, #12]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	791b      	ldrb	r3, [r3, #4]
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f93a 	bl	8004ff6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2204      	movs	r2, #4
 8004d86:	761a      	strb	r2, [r3, #24]
      break;
 8004d88:	e0f1      	b.n	8004f6e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	791b      	ldrb	r3, [r3, #4]
 8004d8e:	4619      	mov	r1, r3
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 fc31 	bl	80055f8 <USBH_LL_GetURBState>
 8004d96:	4603      	mov	r3, r0
 8004d98:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8004d9a:	7bbb      	ldrb	r3, [r7, #14]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d102      	bne.n	8004da6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2209      	movs	r2, #9
 8004da4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8004da6:	7bbb      	ldrb	r3, [r7, #14]
 8004da8:	2b05      	cmp	r3, #5
 8004daa:	d102      	bne.n	8004db2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8004dac:	2303      	movs	r3, #3
 8004dae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8004db0:	e0d6      	b.n	8004f60 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8004db2:	7bbb      	ldrb	r3, [r7, #14]
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	f040 80d3 	bne.w	8004f60 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	220b      	movs	r2, #11
 8004dbe:	761a      	strb	r2, [r3, #24]
      break;
 8004dc0:	e0ce      	b.n	8004f60 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6899      	ldr	r1, [r3, #8]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	899a      	ldrh	r2, [r3, #12]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	795b      	ldrb	r3, [r3, #5]
 8004dce:	2001      	movs	r0, #1
 8004dd0:	9000      	str	r0, [sp, #0]
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f8ea 	bl	8004fac <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2206      	movs	r2, #6
 8004de8:	761a      	strb	r2, [r3, #24]
      break;
 8004dea:	e0c0      	b.n	8004f6e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	795b      	ldrb	r3, [r3, #5]
 8004df0:	4619      	mov	r1, r3
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fc00 	bl	80055f8 <USBH_LL_GetURBState>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8004dfc:	7bbb      	ldrb	r3, [r7, #14]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d103      	bne.n	8004e0a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2207      	movs	r2, #7
 8004e06:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8004e08:	e0ac      	b.n	8004f64 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8004e0a:	7bbb      	ldrb	r3, [r7, #14]
 8004e0c:	2b05      	cmp	r3, #5
 8004e0e:	d105      	bne.n	8004e1c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	220c      	movs	r2, #12
 8004e14:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8004e16:	2303      	movs	r3, #3
 8004e18:	73fb      	strb	r3, [r7, #15]
      break;
 8004e1a:	e0a3      	b.n	8004f64 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8004e1c:	7bbb      	ldrb	r3, [r7, #14]
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d103      	bne.n	8004e2a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2205      	movs	r2, #5
 8004e26:	761a      	strb	r2, [r3, #24]
      break;
 8004e28:	e09c      	b.n	8004f64 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8004e2a:	7bbb      	ldrb	r3, [r7, #14]
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	f040 8099 	bne.w	8004f64 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	220b      	movs	r2, #11
 8004e36:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8004e38:	2302      	movs	r3, #2
 8004e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e3c:	e092      	b.n	8004f64 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	791b      	ldrb	r3, [r3, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	2100      	movs	r1, #0
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f8d5 	bl	8004ff6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2208      	movs	r2, #8
 8004e5c:	761a      	strb	r2, [r3, #24]

      break;
 8004e5e:	e086      	b.n	8004f6e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	791b      	ldrb	r3, [r3, #4]
 8004e64:	4619      	mov	r1, r3
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fbc6 	bl	80055f8 <USBH_LL_GetURBState>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8004e70:	7bbb      	ldrb	r3, [r7, #14]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d105      	bne.n	8004e82 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	220d      	movs	r2, #13
 8004e7a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8004e80:	e072      	b.n	8004f68 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8004e82:	7bbb      	ldrb	r3, [r7, #14]
 8004e84:	2b04      	cmp	r3, #4
 8004e86:	d103      	bne.n	8004e90 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	220b      	movs	r2, #11
 8004e8c:	761a      	strb	r2, [r3, #24]
      break;
 8004e8e:	e06b      	b.n	8004f68 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8004e90:	7bbb      	ldrb	r3, [r7, #14]
 8004e92:	2b05      	cmp	r3, #5
 8004e94:	d168      	bne.n	8004f68 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8004e96:	2303      	movs	r3, #3
 8004e98:	73fb      	strb	r3, [r7, #15]
      break;
 8004e9a:	e065      	b.n	8004f68 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	795b      	ldrb	r3, [r3, #5]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	9200      	str	r2, [sp, #0]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f87f 	bl	8004fac <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	220a      	movs	r2, #10
 8004ebe:	761a      	strb	r2, [r3, #24]
      break;
 8004ec0:	e055      	b.n	8004f6e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	795b      	ldrb	r3, [r3, #5]
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 fb95 	bl	80055f8 <USBH_LL_GetURBState>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8004ed2:	7bbb      	ldrb	r3, [r7, #14]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d105      	bne.n	8004ee4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	220d      	movs	r2, #13
 8004ee0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8004ee2:	e043      	b.n	8004f6c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8004ee4:	7bbb      	ldrb	r3, [r7, #14]
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d103      	bne.n	8004ef2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2209      	movs	r2, #9
 8004eee:	761a      	strb	r2, [r3, #24]
      break;
 8004ef0:	e03c      	b.n	8004f6c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8004ef2:	7bbb      	ldrb	r3, [r7, #14]
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d139      	bne.n	8004f6c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	220b      	movs	r2, #11
 8004efc:	761a      	strb	r2, [r3, #24]
      break;
 8004efe:	e035      	b.n	8004f6c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	7e5b      	ldrb	r3, [r3, #25]
 8004f04:	3301      	adds	r3, #1
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	765a      	strb	r2, [r3, #25]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	7e5b      	ldrb	r3, [r3, #25]
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d806      	bhi.n	8004f22 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8004f20:	e025      	b.n	8004f6e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004f28:	2106      	movs	r1, #6
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	795b      	ldrb	r3, [r3, #5]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f90c 	bl	8005158 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	791b      	ldrb	r3, [r3, #4]
 8004f44:	4619      	mov	r1, r3
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f906 	bl	8005158 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8004f52:	2302      	movs	r3, #2
 8004f54:	73fb      	strb	r3, [r7, #15]
      break;
 8004f56:	e00a      	b.n	8004f6e <USBH_HandleControl+0x2de>

    default:
      break;
 8004f58:	bf00      	nop
 8004f5a:	e008      	b.n	8004f6e <USBH_HandleControl+0x2de>
      break;
 8004f5c:	bf00      	nop
 8004f5e:	e006      	b.n	8004f6e <USBH_HandleControl+0x2de>
      break;
 8004f60:	bf00      	nop
 8004f62:	e004      	b.n	8004f6e <USBH_HandleControl+0x2de>
      break;
 8004f64:	bf00      	nop
 8004f66:	e002      	b.n	8004f6e <USBH_HandleControl+0x2de>
      break;
 8004f68:	bf00      	nop
 8004f6a:	e000      	b.n	8004f6e <USBH_HandleControl+0x2de>
      break;
 8004f6c:	bf00      	nop
  }

  return status;
 8004f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af04      	add	r7, sp, #16
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	4613      	mov	r3, r2
 8004f84:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8004f86:	79f9      	ldrb	r1, [r7, #7]
 8004f88:	2300      	movs	r3, #0
 8004f8a:	9303      	str	r3, [sp, #12]
 8004f8c:	2308      	movs	r3, #8
 8004f8e:	9302      	str	r3, [sp, #8]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	9301      	str	r3, [sp, #4]
 8004f94:	2300      	movs	r3, #0
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	2300      	movs	r3, #0
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f000 fafa 	bl	8005596 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af04      	add	r7, sp, #16
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	4611      	mov	r1, r2
 8004fb8:	461a      	mov	r2, r3
 8004fba:	460b      	mov	r3, r1
 8004fbc:	80fb      	strh	r3, [r7, #6]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8004fd0:	7979      	ldrb	r1, [r7, #5]
 8004fd2:	7e3b      	ldrb	r3, [r7, #24]
 8004fd4:	9303      	str	r3, [sp, #12]
 8004fd6:	88fb      	ldrh	r3, [r7, #6]
 8004fd8:	9302      	str	r3, [sp, #8]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	9301      	str	r3, [sp, #4]
 8004fde:	2301      	movs	r3, #1
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 fad5 	bl	8005596 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b088      	sub	sp, #32
 8004ffa:	af04      	add	r7, sp, #16
 8004ffc:	60f8      	str	r0, [r7, #12]
 8004ffe:	60b9      	str	r1, [r7, #8]
 8005000:	4611      	mov	r1, r2
 8005002:	461a      	mov	r2, r3
 8005004:	460b      	mov	r3, r1
 8005006:	80fb      	strh	r3, [r7, #6]
 8005008:	4613      	mov	r3, r2
 800500a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800500c:	7979      	ldrb	r1, [r7, #5]
 800500e:	2300      	movs	r3, #0
 8005010:	9303      	str	r3, [sp, #12]
 8005012:	88fb      	ldrh	r3, [r7, #6]
 8005014:	9302      	str	r3, [sp, #8]
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	9301      	str	r3, [sp, #4]
 800501a:	2301      	movs	r3, #1
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	2300      	movs	r3, #0
 8005020:	2201      	movs	r2, #1
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 fab7 	bl	8005596 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8005028:	2300      	movs	r3, #0

}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b088      	sub	sp, #32
 8005036:	af04      	add	r7, sp, #16
 8005038:	60f8      	str	r0, [r7, #12]
 800503a:	60b9      	str	r1, [r7, #8]
 800503c:	4611      	mov	r1, r2
 800503e:	461a      	mov	r2, r3
 8005040:	460b      	mov	r3, r1
 8005042:	80fb      	strh	r3, [r7, #6]
 8005044:	4613      	mov	r3, r2
 8005046:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8005052:	2300      	movs	r3, #0
 8005054:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8005056:	7979      	ldrb	r1, [r7, #5]
 8005058:	7e3b      	ldrb	r3, [r7, #24]
 800505a:	9303      	str	r3, [sp, #12]
 800505c:	88fb      	ldrh	r3, [r7, #6]
 800505e:	9302      	str	r3, [sp, #8]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	9301      	str	r3, [sp, #4]
 8005064:	2301      	movs	r3, #1
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	2302      	movs	r3, #2
 800506a:	2200      	movs	r2, #0
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 fa92 	bl	8005596 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b088      	sub	sp, #32
 8005080:	af04      	add	r7, sp, #16
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	4611      	mov	r1, r2
 8005088:	461a      	mov	r2, r3
 800508a:	460b      	mov	r3, r1
 800508c:	80fb      	strh	r3, [r7, #6]
 800508e:	4613      	mov	r3, r2
 8005090:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8005092:	7979      	ldrb	r1, [r7, #5]
 8005094:	2300      	movs	r3, #0
 8005096:	9303      	str	r3, [sp, #12]
 8005098:	88fb      	ldrh	r3, [r7, #6]
 800509a:	9302      	str	r3, [sp, #8]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	9301      	str	r3, [sp, #4]
 80050a0:	2301      	movs	r3, #1
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	2302      	movs	r3, #2
 80050a6:	2201      	movs	r2, #1
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 fa74 	bl	8005596 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af04      	add	r7, sp, #16
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	4608      	mov	r0, r1
 80050c2:	4611      	mov	r1, r2
 80050c4:	461a      	mov	r2, r3
 80050c6:	4603      	mov	r3, r0
 80050c8:	70fb      	strb	r3, [r7, #3]
 80050ca:	460b      	mov	r3, r1
 80050cc:	70bb      	strb	r3, [r7, #2]
 80050ce:	4613      	mov	r3, r2
 80050d0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80050d2:	7878      	ldrb	r0, [r7, #1]
 80050d4:	78ba      	ldrb	r2, [r7, #2]
 80050d6:	78f9      	ldrb	r1, [r7, #3]
 80050d8:	8b3b      	ldrh	r3, [r7, #24]
 80050da:	9302      	str	r3, [sp, #8]
 80050dc:	7d3b      	ldrb	r3, [r7, #20]
 80050de:	9301      	str	r3, [sp, #4]
 80050e0:	7c3b      	ldrb	r3, [r7, #16]
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	4603      	mov	r3, r0
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fa07 	bl	80054fa <USBH_LL_OpenPipe>

  return USBH_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b082      	sub	sp, #8
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
 80050fe:	460b      	mov	r3, r1
 8005100:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8005102:	78fb      	ldrb	r3, [r7, #3]
 8005104:	4619      	mov	r1, r3
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 fa26 	bl	8005558 <USBH_LL_ClosePipe>

  return USBH_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	460b      	mov	r3, r1
 8005120:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f836 	bl	8005194 <USBH_GetFreePipe>
 8005128:	4603      	mov	r3, r0
 800512a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800512c:	89fb      	ldrh	r3, [r7, #14]
 800512e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005132:	4293      	cmp	r3, r2
 8005134:	d00a      	beq.n	800514c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8005136:	78fa      	ldrb	r2, [r7, #3]
 8005138:	89fb      	ldrh	r3, [r7, #14]
 800513a:	f003 030f 	and.w	r3, r3, #15
 800513e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005142:	6879      	ldr	r1, [r7, #4]
 8005144:	33e0      	adds	r3, #224	; 0xe0
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	440b      	add	r3, r1
 800514a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800514c:	89fb      	ldrh	r3, [r7, #14]
 800514e:	b2db      	uxtb	r3, r3
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	460b      	mov	r3, r1
 8005162:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8005164:	78fb      	ldrb	r3, [r7, #3]
 8005166:	2b0f      	cmp	r3, #15
 8005168:	d80d      	bhi.n	8005186 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800516a:	78fb      	ldrb	r3, [r7, #3]
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	33e0      	adds	r3, #224	; 0xe0
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	78fb      	ldrb	r3, [r7, #3]
 8005178:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800517c:	6879      	ldr	r1, [r7, #4]
 800517e:	33e0      	adds	r3, #224	; 0xe0
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	440b      	add	r3, r1
 8005184:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80051a0:	2300      	movs	r3, #0
 80051a2:	73fb      	strb	r3, [r7, #15]
 80051a4:	e00f      	b.n	80051c6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80051a6:	7bfb      	ldrb	r3, [r7, #15]
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	33e0      	adds	r3, #224	; 0xe0
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d102      	bne.n	80051c0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80051ba:	7bfb      	ldrb	r3, [r7, #15]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	e007      	b.n	80051d0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	3301      	adds	r3, #1
 80051c4:	73fb      	strb	r3, [r7, #15]
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
 80051c8:	2b0f      	cmp	r3, #15
 80051ca:	d9ec      	bls.n	80051a6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80051cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80051e0:	2201      	movs	r2, #1
 80051e2:	490e      	ldr	r1, [pc, #56]	; (800521c <MX_USB_HOST_Init+0x40>)
 80051e4:	480e      	ldr	r0, [pc, #56]	; (8005220 <MX_USB_HOST_Init+0x44>)
 80051e6:	f7ff fb37 	bl	8004858 <USBH_Init>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80051f0:	f7fb fb3c 	bl	800086c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80051f4:	490b      	ldr	r1, [pc, #44]	; (8005224 <MX_USB_HOST_Init+0x48>)
 80051f6:	480a      	ldr	r0, [pc, #40]	; (8005220 <MX_USB_HOST_Init+0x44>)
 80051f8:	f7ff fbbc 	bl	8004974 <USBH_RegisterClass>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8005202:	f7fb fb33 	bl	800086c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8005206:	4806      	ldr	r0, [pc, #24]	; (8005220 <MX_USB_HOST_Init+0x44>)
 8005208:	f7ff fc40 	bl	8004a8c <USBH_Start>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8005212:	f7fb fb2b 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8005216:	bf00      	nop
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	08005229 	.word	0x08005229
 8005220:	200000b4 	.word	0x200000b4
 8005224:	2000000c 	.word	0x2000000c

08005228 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	460b      	mov	r3, r1
 8005232:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8005234:	78fb      	ldrb	r3, [r7, #3]
 8005236:	3b01      	subs	r3, #1
 8005238:	2b04      	cmp	r3, #4
 800523a:	d819      	bhi.n	8005270 <USBH_UserProcess+0x48>
 800523c:	a201      	add	r2, pc, #4	; (adr r2, 8005244 <USBH_UserProcess+0x1c>)
 800523e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005242:	bf00      	nop
 8005244:	08005271 	.word	0x08005271
 8005248:	08005261 	.word	0x08005261
 800524c:	08005271 	.word	0x08005271
 8005250:	08005269 	.word	0x08005269
 8005254:	08005259 	.word	0x08005259
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8005258:	4b09      	ldr	r3, [pc, #36]	; (8005280 <USBH_UserProcess+0x58>)
 800525a:	2203      	movs	r2, #3
 800525c:	701a      	strb	r2, [r3, #0]
  break;
 800525e:	e008      	b.n	8005272 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8005260:	4b07      	ldr	r3, [pc, #28]	; (8005280 <USBH_UserProcess+0x58>)
 8005262:	2202      	movs	r2, #2
 8005264:	701a      	strb	r2, [r3, #0]
  break;
 8005266:	e004      	b.n	8005272 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8005268:	4b05      	ldr	r3, [pc, #20]	; (8005280 <USBH_UserProcess+0x58>)
 800526a:	2201      	movs	r2, #1
 800526c:	701a      	strb	r2, [r3, #0]
  break;
 800526e:	e000      	b.n	8005272 <USBH_UserProcess+0x4a>

  default:
  break;
 8005270:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8005272:	bf00      	nop
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	2000048c 	.word	0x2000048c

08005284 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b08a      	sub	sp, #40	; 0x28
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800528c:	f107 0314 	add.w	r3, r7, #20
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	605a      	str	r2, [r3, #4]
 8005296:	609a      	str	r2, [r3, #8]
 8005298:	60da      	str	r2, [r3, #12]
 800529a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052a4:	d147      	bne.n	8005336 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052a6:	2300      	movs	r3, #0
 80052a8:	613b      	str	r3, [r7, #16]
 80052aa:	4b25      	ldr	r3, [pc, #148]	; (8005340 <HAL_HCD_MspInit+0xbc>)
 80052ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ae:	4a24      	ldr	r2, [pc, #144]	; (8005340 <HAL_HCD_MspInit+0xbc>)
 80052b0:	f043 0301 	orr.w	r3, r3, #1
 80052b4:	6313      	str	r3, [r2, #48]	; 0x30
 80052b6:	4b22      	ldr	r3, [pc, #136]	; (8005340 <HAL_HCD_MspInit+0xbc>)
 80052b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	613b      	str	r3, [r7, #16]
 80052c0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80052c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80052c8:	2300      	movs	r3, #0
 80052ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052cc:	2300      	movs	r3, #0
 80052ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80052d0:	f107 0314 	add.w	r3, r7, #20
 80052d4:	4619      	mov	r1, r3
 80052d6:	481b      	ldr	r0, [pc, #108]	; (8005344 <HAL_HCD_MspInit+0xc0>)
 80052d8:	f7fb fd44 	bl	8000d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80052dc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80052e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052e2:	2302      	movs	r3, #2
 80052e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e6:	2300      	movs	r3, #0
 80052e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052ea:	2300      	movs	r3, #0
 80052ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80052ee:	230a      	movs	r3, #10
 80052f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052f2:	f107 0314 	add.w	r3, r7, #20
 80052f6:	4619      	mov	r1, r3
 80052f8:	4812      	ldr	r0, [pc, #72]	; (8005344 <HAL_HCD_MspInit+0xc0>)
 80052fa:	f7fb fd33 	bl	8000d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80052fe:	4b10      	ldr	r3, [pc, #64]	; (8005340 <HAL_HCD_MspInit+0xbc>)
 8005300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005302:	4a0f      	ldr	r2, [pc, #60]	; (8005340 <HAL_HCD_MspInit+0xbc>)
 8005304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005308:	6353      	str	r3, [r2, #52]	; 0x34
 800530a:	2300      	movs	r3, #0
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	4b0c      	ldr	r3, [pc, #48]	; (8005340 <HAL_HCD_MspInit+0xbc>)
 8005310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005312:	4a0b      	ldr	r2, [pc, #44]	; (8005340 <HAL_HCD_MspInit+0xbc>)
 8005314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005318:	6453      	str	r3, [r2, #68]	; 0x44
 800531a:	4b09      	ldr	r3, [pc, #36]	; (8005340 <HAL_HCD_MspInit+0xbc>)
 800531c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005326:	2200      	movs	r2, #0
 8005328:	2100      	movs	r1, #0
 800532a:	2043      	movs	r0, #67	; 0x43
 800532c:	f7fb fce3 	bl	8000cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005330:	2043      	movs	r0, #67	; 0x43
 8005332:	f7fb fcfc 	bl	8000d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005336:	bf00      	nop
 8005338:	3728      	adds	r7, #40	; 0x28
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	40023800 	.word	0x40023800
 8005344:	40020000 	.word	0x40020000

08005348 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005356:	4618      	mov	r0, r3
 8005358:	f7ff fbb7 	bl	8004aca <USBH_LL_IncTimer>
}
 800535c:	bf00      	nop
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff fbef 	bl	8004b56 <USBH_LL_Connect>
}
 8005378:	bf00      	nop
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff fbf8 	bl	8004b84 <USBH_LL_Disconnect>
}
 8005394:	bf00      	nop
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	460b      	mov	r3, r1
 80053a6:	70fb      	strb	r3, [r7, #3]
 80053a8:	4613      	mov	r3, r2
 80053aa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7ff fba9 	bl	8004b1e <USBH_LL_PortEnabled>
}
 80053cc:	bf00      	nop
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff fba9 	bl	8004b3a <USBH_LL_PortDisabled>
}
 80053e8:	bf00      	nop
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d12a      	bne.n	8005458 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8005402:	4a18      	ldr	r2, [pc, #96]	; (8005464 <USBH_LL_Init+0x74>)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a15      	ldr	r2, [pc, #84]	; (8005464 <USBH_LL_Init+0x74>)
 800540e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005412:	4b14      	ldr	r3, [pc, #80]	; (8005464 <USBH_LL_Init+0x74>)
 8005414:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005418:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800541a:	4b12      	ldr	r3, [pc, #72]	; (8005464 <USBH_LL_Init+0x74>)
 800541c:	2208      	movs	r2, #8
 800541e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8005420:	4b10      	ldr	r3, [pc, #64]	; (8005464 <USBH_LL_Init+0x74>)
 8005422:	2201      	movs	r2, #1
 8005424:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005426:	4b0f      	ldr	r3, [pc, #60]	; (8005464 <USBH_LL_Init+0x74>)
 8005428:	2200      	movs	r2, #0
 800542a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800542c:	4b0d      	ldr	r3, [pc, #52]	; (8005464 <USBH_LL_Init+0x74>)
 800542e:	2202      	movs	r2, #2
 8005430:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005432:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <USBH_LL_Init+0x74>)
 8005434:	2200      	movs	r2, #0
 8005436:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8005438:	480a      	ldr	r0, [pc, #40]	; (8005464 <USBH_LL_Init+0x74>)
 800543a:	f7fb fe62 	bl	8001102 <HAL_HCD_Init>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d001      	beq.n	8005448 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8005444:	f7fb fa12 	bl	800086c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8005448:	4806      	ldr	r0, [pc, #24]	; (8005464 <USBH_LL_Init+0x74>)
 800544a:	f7fc fa38 	bl	80018be <HAL_HCD_GetCurrentFrame>
 800544e:	4603      	mov	r3, r0
 8005450:	4619      	mov	r1, r3
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7ff fb2a 	bl	8004aac <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	20000490 	.word	0x20000490

08005468 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005470:	2300      	movs	r3, #0
 8005472:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005474:	2300      	movs	r3, #0
 8005476:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800547e:	4618      	mov	r0, r3
 8005480:	f7fc f9b5 	bl	80017ee <HAL_HCD_Start>
 8005484:	4603      	mov	r3, r0
 8005486:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8005488:	7bfb      	ldrb	r3, [r7, #15]
 800548a:	4618      	mov	r0, r3
 800548c:	f000 f90e 	bl	80056ac <USBH_Get_USB_Status>
 8005490:	4603      	mov	r3, r0
 8005492:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005494:	7bbb      	ldrb	r3, [r7, #14]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b084      	sub	sp, #16
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7fc f9bd 	bl	8001834 <HAL_HCD_Stop>
 80054ba:	4603      	mov	r3, r0
 80054bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80054be:	7bfb      	ldrb	r3, [r7, #15]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 f8f3 	bl	80056ac <USBH_Get_USB_Status>
 80054c6:	4603      	mov	r3, r0
 80054c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80054ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	460b      	mov	r3, r1
 80054de:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80054e6:	78fa      	ldrb	r2, [r7, #3]
 80054e8:	4611      	mov	r1, r2
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fc f9d3 	bl	8001896 <HAL_HCD_HC_GetXferCount>
 80054f0:	4603      	mov	r3, r0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80054fa:	b590      	push	{r4, r7, lr}
 80054fc:	b089      	sub	sp, #36	; 0x24
 80054fe:	af04      	add	r7, sp, #16
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	4608      	mov	r0, r1
 8005504:	4611      	mov	r1, r2
 8005506:	461a      	mov	r2, r3
 8005508:	4603      	mov	r3, r0
 800550a:	70fb      	strb	r3, [r7, #3]
 800550c:	460b      	mov	r3, r1
 800550e:	70bb      	strb	r3, [r7, #2]
 8005510:	4613      	mov	r3, r2
 8005512:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005514:	2300      	movs	r3, #0
 8005516:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005518:	2300      	movs	r3, #0
 800551a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8005522:	787c      	ldrb	r4, [r7, #1]
 8005524:	78ba      	ldrb	r2, [r7, #2]
 8005526:	78f9      	ldrb	r1, [r7, #3]
 8005528:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800552a:	9302      	str	r3, [sp, #8]
 800552c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005530:	9301      	str	r3, [sp, #4]
 8005532:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	4623      	mov	r3, r4
 800553a:	f7fb fe44 	bl	80011c6 <HAL_HCD_HC_Init>
 800553e:	4603      	mov	r3, r0
 8005540:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8005542:	7bfb      	ldrb	r3, [r7, #15]
 8005544:	4618      	mov	r0, r3
 8005546:	f000 f8b1 	bl	80056ac <USBH_Get_USB_Status>
 800554a:	4603      	mov	r3, r0
 800554c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800554e:	7bbb      	ldrb	r3, [r7, #14]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	bd90      	pop	{r4, r7, pc}

08005558 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	460b      	mov	r3, r1
 8005562:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005564:	2300      	movs	r3, #0
 8005566:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005568:	2300      	movs	r3, #0
 800556a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005572:	78fa      	ldrb	r2, [r7, #3]
 8005574:	4611      	mov	r1, r2
 8005576:	4618      	mov	r0, r3
 8005578:	f7fb feb4 	bl	80012e4 <HAL_HCD_HC_Halt>
 800557c:	4603      	mov	r3, r0
 800557e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8005580:	7bfb      	ldrb	r3, [r7, #15]
 8005582:	4618      	mov	r0, r3
 8005584:	f000 f892 	bl	80056ac <USBH_Get_USB_Status>
 8005588:	4603      	mov	r3, r0
 800558a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800558c:	7bbb      	ldrb	r3, [r7, #14]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8005596:	b590      	push	{r4, r7, lr}
 8005598:	b089      	sub	sp, #36	; 0x24
 800559a:	af04      	add	r7, sp, #16
 800559c:	6078      	str	r0, [r7, #4]
 800559e:	4608      	mov	r0, r1
 80055a0:	4611      	mov	r1, r2
 80055a2:	461a      	mov	r2, r3
 80055a4:	4603      	mov	r3, r0
 80055a6:	70fb      	strb	r3, [r7, #3]
 80055a8:	460b      	mov	r3, r1
 80055aa:	70bb      	strb	r3, [r7, #2]
 80055ac:	4613      	mov	r3, r2
 80055ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80055b0:	2300      	movs	r3, #0
 80055b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80055be:	787c      	ldrb	r4, [r7, #1]
 80055c0:	78ba      	ldrb	r2, [r7, #2]
 80055c2:	78f9      	ldrb	r1, [r7, #3]
 80055c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80055c8:	9303      	str	r3, [sp, #12]
 80055ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80055cc:	9302      	str	r3, [sp, #8]
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	9301      	str	r3, [sp, #4]
 80055d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	4623      	mov	r3, r4
 80055da:	f7fb fea7 	bl	800132c <HAL_HCD_HC_SubmitRequest>
 80055de:	4603      	mov	r3, r0
 80055e0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80055e2:	7bfb      	ldrb	r3, [r7, #15]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 f861 	bl	80056ac <USBH_Get_USB_Status>
 80055ea:	4603      	mov	r3, r0
 80055ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80055ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd90      	pop	{r4, r7, pc}

080055f8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	460b      	mov	r3, r1
 8005602:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800560a:	78fa      	ldrb	r2, [r7, #3]
 800560c:	4611      	mov	r1, r2
 800560e:	4618      	mov	r0, r3
 8005610:	f7fc f92d 	bl	800186e <HAL_HCD_HC_GetURBState>
 8005614:	4603      	mov	r3, r0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b082      	sub	sp, #8
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	460b      	mov	r3, r1
 8005628:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8005630:	2b01      	cmp	r3, #1
 8005632:	d103      	bne.n	800563c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8005634:	78fb      	ldrb	r3, [r7, #3]
 8005636:	4618      	mov	r0, r3
 8005638:	f000 f864 	bl	8005704 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800563c:	20c8      	movs	r0, #200	; 0xc8
 800563e:	f7fb fa5b 	bl	8000af8 <HAL_Delay>
  return USBH_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	460b      	mov	r3, r1
 8005656:	70fb      	strb	r3, [r7, #3]
 8005658:	4613      	mov	r3, r2
 800565a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005662:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8005664:	78fb      	ldrb	r3, [r7, #3]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	212c      	movs	r1, #44	; 0x2c
 800566a:	fb01 f303 	mul.w	r3, r1, r3
 800566e:	4413      	add	r3, r2
 8005670:	333b      	adds	r3, #59	; 0x3b
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d009      	beq.n	800568c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8005678:	78fb      	ldrb	r3, [r7, #3]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	212c      	movs	r1, #44	; 0x2c
 800567e:	fb01 f303 	mul.w	r3, r1, r3
 8005682:	4413      	add	r3, r2
 8005684:	3354      	adds	r3, #84	; 0x54
 8005686:	78ba      	ldrb	r2, [r7, #2]
 8005688:	701a      	strb	r2, [r3, #0]
 800568a:	e008      	b.n	800569e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800568c:	78fb      	ldrb	r3, [r7, #3]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	212c      	movs	r1, #44	; 0x2c
 8005692:	fb01 f303 	mul.w	r3, r1, r3
 8005696:	4413      	add	r3, r2
 8005698:	3355      	adds	r3, #85	; 0x55
 800569a:	78ba      	ldrb	r2, [r7, #2]
 800569c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	4603      	mov	r3, r0
 80056b4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80056b6:	2300      	movs	r3, #0
 80056b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80056ba:	79fb      	ldrb	r3, [r7, #7]
 80056bc:	2b03      	cmp	r3, #3
 80056be:	d817      	bhi.n	80056f0 <USBH_Get_USB_Status+0x44>
 80056c0:	a201      	add	r2, pc, #4	; (adr r2, 80056c8 <USBH_Get_USB_Status+0x1c>)
 80056c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c6:	bf00      	nop
 80056c8:	080056d9 	.word	0x080056d9
 80056cc:	080056df 	.word	0x080056df
 80056d0:	080056e5 	.word	0x080056e5
 80056d4:	080056eb 	.word	0x080056eb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80056d8:	2300      	movs	r3, #0
 80056da:	73fb      	strb	r3, [r7, #15]
    break;
 80056dc:	e00b      	b.n	80056f6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80056de:	2302      	movs	r3, #2
 80056e0:	73fb      	strb	r3, [r7, #15]
    break;
 80056e2:	e008      	b.n	80056f6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80056e4:	2301      	movs	r3, #1
 80056e6:	73fb      	strb	r3, [r7, #15]
    break;
 80056e8:	e005      	b.n	80056f6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80056ea:	2302      	movs	r3, #2
 80056ec:	73fb      	strb	r3, [r7, #15]
    break;
 80056ee:	e002      	b.n	80056f6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80056f0:	2302      	movs	r3, #2
 80056f2:	73fb      	strb	r3, [r7, #15]
    break;
 80056f4:	bf00      	nop
  }
  return usb_status;
 80056f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	4603      	mov	r3, r0
 800570c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800570e:	79fb      	ldrb	r3, [r7, #7]
 8005710:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8005712:	79fb      	ldrb	r3, [r7, #7]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d102      	bne.n	800571e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8005718:	2300      	movs	r3, #0
 800571a:	73fb      	strb	r3, [r7, #15]
 800571c:	e001      	b.n	8005722 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800571e:	2301      	movs	r3, #1
 8005720:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8005722:	7bfb      	ldrb	r3, [r7, #15]
 8005724:	461a      	mov	r2, r3
 8005726:	2101      	movs	r1, #1
 8005728:	4803      	ldr	r0, [pc, #12]	; (8005738 <MX_DriverVbusFS+0x34>)
 800572a:	f7fb fcb7 	bl	800109c <HAL_GPIO_WritePin>
}
 800572e:	bf00      	nop
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	40020800 	.word	0x40020800

0800573c <__errno>:
 800573c:	4b01      	ldr	r3, [pc, #4]	; (8005744 <__errno+0x8>)
 800573e:	6818      	ldr	r0, [r3, #0]
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	2000002c 	.word	0x2000002c

08005748 <__libc_init_array>:
 8005748:	b570      	push	{r4, r5, r6, lr}
 800574a:	4d0d      	ldr	r5, [pc, #52]	; (8005780 <__libc_init_array+0x38>)
 800574c:	4c0d      	ldr	r4, [pc, #52]	; (8005784 <__libc_init_array+0x3c>)
 800574e:	1b64      	subs	r4, r4, r5
 8005750:	10a4      	asrs	r4, r4, #2
 8005752:	2600      	movs	r6, #0
 8005754:	42a6      	cmp	r6, r4
 8005756:	d109      	bne.n	800576c <__libc_init_array+0x24>
 8005758:	4d0b      	ldr	r5, [pc, #44]	; (8005788 <__libc_init_array+0x40>)
 800575a:	4c0c      	ldr	r4, [pc, #48]	; (800578c <__libc_init_array+0x44>)
 800575c:	f000 f92e 	bl	80059bc <_init>
 8005760:	1b64      	subs	r4, r4, r5
 8005762:	10a4      	asrs	r4, r4, #2
 8005764:	2600      	movs	r6, #0
 8005766:	42a6      	cmp	r6, r4
 8005768:	d105      	bne.n	8005776 <__libc_init_array+0x2e>
 800576a:	bd70      	pop	{r4, r5, r6, pc}
 800576c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005770:	4798      	blx	r3
 8005772:	3601      	adds	r6, #1
 8005774:	e7ee      	b.n	8005754 <__libc_init_array+0xc>
 8005776:	f855 3b04 	ldr.w	r3, [r5], #4
 800577a:	4798      	blx	r3
 800577c:	3601      	adds	r6, #1
 800577e:	e7f2      	b.n	8005766 <__libc_init_array+0x1e>
 8005780:	080059f0 	.word	0x080059f0
 8005784:	080059f0 	.word	0x080059f0
 8005788:	080059f0 	.word	0x080059f0
 800578c:	080059f4 	.word	0x080059f4

08005790 <malloc>:
 8005790:	4b02      	ldr	r3, [pc, #8]	; (800579c <malloc+0xc>)
 8005792:	4601      	mov	r1, r0
 8005794:	6818      	ldr	r0, [r3, #0]
 8005796:	f000 b87f 	b.w	8005898 <_malloc_r>
 800579a:	bf00      	nop
 800579c:	2000002c 	.word	0x2000002c

080057a0 <free>:
 80057a0:	4b02      	ldr	r3, [pc, #8]	; (80057ac <free+0xc>)
 80057a2:	4601      	mov	r1, r0
 80057a4:	6818      	ldr	r0, [r3, #0]
 80057a6:	f000 b80b 	b.w	80057c0 <_free_r>
 80057aa:	bf00      	nop
 80057ac:	2000002c 	.word	0x2000002c

080057b0 <memset>:
 80057b0:	4402      	add	r2, r0
 80057b2:	4603      	mov	r3, r0
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d100      	bne.n	80057ba <memset+0xa>
 80057b8:	4770      	bx	lr
 80057ba:	f803 1b01 	strb.w	r1, [r3], #1
 80057be:	e7f9      	b.n	80057b4 <memset+0x4>

080057c0 <_free_r>:
 80057c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057c2:	2900      	cmp	r1, #0
 80057c4:	d044      	beq.n	8005850 <_free_r+0x90>
 80057c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057ca:	9001      	str	r0, [sp, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f1a1 0404 	sub.w	r4, r1, #4
 80057d2:	bfb8      	it	lt
 80057d4:	18e4      	addlt	r4, r4, r3
 80057d6:	f000 f8e3 	bl	80059a0 <__malloc_lock>
 80057da:	4a1e      	ldr	r2, [pc, #120]	; (8005854 <_free_r+0x94>)
 80057dc:	9801      	ldr	r0, [sp, #4]
 80057de:	6813      	ldr	r3, [r2, #0]
 80057e0:	b933      	cbnz	r3, 80057f0 <_free_r+0x30>
 80057e2:	6063      	str	r3, [r4, #4]
 80057e4:	6014      	str	r4, [r2, #0]
 80057e6:	b003      	add	sp, #12
 80057e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057ec:	f000 b8de 	b.w	80059ac <__malloc_unlock>
 80057f0:	42a3      	cmp	r3, r4
 80057f2:	d908      	bls.n	8005806 <_free_r+0x46>
 80057f4:	6825      	ldr	r5, [r4, #0]
 80057f6:	1961      	adds	r1, r4, r5
 80057f8:	428b      	cmp	r3, r1
 80057fa:	bf01      	itttt	eq
 80057fc:	6819      	ldreq	r1, [r3, #0]
 80057fe:	685b      	ldreq	r3, [r3, #4]
 8005800:	1949      	addeq	r1, r1, r5
 8005802:	6021      	streq	r1, [r4, #0]
 8005804:	e7ed      	b.n	80057e2 <_free_r+0x22>
 8005806:	461a      	mov	r2, r3
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	b10b      	cbz	r3, 8005810 <_free_r+0x50>
 800580c:	42a3      	cmp	r3, r4
 800580e:	d9fa      	bls.n	8005806 <_free_r+0x46>
 8005810:	6811      	ldr	r1, [r2, #0]
 8005812:	1855      	adds	r5, r2, r1
 8005814:	42a5      	cmp	r5, r4
 8005816:	d10b      	bne.n	8005830 <_free_r+0x70>
 8005818:	6824      	ldr	r4, [r4, #0]
 800581a:	4421      	add	r1, r4
 800581c:	1854      	adds	r4, r2, r1
 800581e:	42a3      	cmp	r3, r4
 8005820:	6011      	str	r1, [r2, #0]
 8005822:	d1e0      	bne.n	80057e6 <_free_r+0x26>
 8005824:	681c      	ldr	r4, [r3, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	6053      	str	r3, [r2, #4]
 800582a:	4421      	add	r1, r4
 800582c:	6011      	str	r1, [r2, #0]
 800582e:	e7da      	b.n	80057e6 <_free_r+0x26>
 8005830:	d902      	bls.n	8005838 <_free_r+0x78>
 8005832:	230c      	movs	r3, #12
 8005834:	6003      	str	r3, [r0, #0]
 8005836:	e7d6      	b.n	80057e6 <_free_r+0x26>
 8005838:	6825      	ldr	r5, [r4, #0]
 800583a:	1961      	adds	r1, r4, r5
 800583c:	428b      	cmp	r3, r1
 800583e:	bf04      	itt	eq
 8005840:	6819      	ldreq	r1, [r3, #0]
 8005842:	685b      	ldreq	r3, [r3, #4]
 8005844:	6063      	str	r3, [r4, #4]
 8005846:	bf04      	itt	eq
 8005848:	1949      	addeq	r1, r1, r5
 800584a:	6021      	streq	r1, [r4, #0]
 800584c:	6054      	str	r4, [r2, #4]
 800584e:	e7ca      	b.n	80057e6 <_free_r+0x26>
 8005850:	b003      	add	sp, #12
 8005852:	bd30      	pop	{r4, r5, pc}
 8005854:	20000794 	.word	0x20000794

08005858 <sbrk_aligned>:
 8005858:	b570      	push	{r4, r5, r6, lr}
 800585a:	4e0e      	ldr	r6, [pc, #56]	; (8005894 <sbrk_aligned+0x3c>)
 800585c:	460c      	mov	r4, r1
 800585e:	6831      	ldr	r1, [r6, #0]
 8005860:	4605      	mov	r5, r0
 8005862:	b911      	cbnz	r1, 800586a <sbrk_aligned+0x12>
 8005864:	f000 f88c 	bl	8005980 <_sbrk_r>
 8005868:	6030      	str	r0, [r6, #0]
 800586a:	4621      	mov	r1, r4
 800586c:	4628      	mov	r0, r5
 800586e:	f000 f887 	bl	8005980 <_sbrk_r>
 8005872:	1c43      	adds	r3, r0, #1
 8005874:	d00a      	beq.n	800588c <sbrk_aligned+0x34>
 8005876:	1cc4      	adds	r4, r0, #3
 8005878:	f024 0403 	bic.w	r4, r4, #3
 800587c:	42a0      	cmp	r0, r4
 800587e:	d007      	beq.n	8005890 <sbrk_aligned+0x38>
 8005880:	1a21      	subs	r1, r4, r0
 8005882:	4628      	mov	r0, r5
 8005884:	f000 f87c 	bl	8005980 <_sbrk_r>
 8005888:	3001      	adds	r0, #1
 800588a:	d101      	bne.n	8005890 <sbrk_aligned+0x38>
 800588c:	f04f 34ff 	mov.w	r4, #4294967295
 8005890:	4620      	mov	r0, r4
 8005892:	bd70      	pop	{r4, r5, r6, pc}
 8005894:	20000798 	.word	0x20000798

08005898 <_malloc_r>:
 8005898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800589c:	1ccd      	adds	r5, r1, #3
 800589e:	f025 0503 	bic.w	r5, r5, #3
 80058a2:	3508      	adds	r5, #8
 80058a4:	2d0c      	cmp	r5, #12
 80058a6:	bf38      	it	cc
 80058a8:	250c      	movcc	r5, #12
 80058aa:	2d00      	cmp	r5, #0
 80058ac:	4607      	mov	r7, r0
 80058ae:	db01      	blt.n	80058b4 <_malloc_r+0x1c>
 80058b0:	42a9      	cmp	r1, r5
 80058b2:	d905      	bls.n	80058c0 <_malloc_r+0x28>
 80058b4:	230c      	movs	r3, #12
 80058b6:	603b      	str	r3, [r7, #0]
 80058b8:	2600      	movs	r6, #0
 80058ba:	4630      	mov	r0, r6
 80058bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058c0:	4e2e      	ldr	r6, [pc, #184]	; (800597c <_malloc_r+0xe4>)
 80058c2:	f000 f86d 	bl	80059a0 <__malloc_lock>
 80058c6:	6833      	ldr	r3, [r6, #0]
 80058c8:	461c      	mov	r4, r3
 80058ca:	bb34      	cbnz	r4, 800591a <_malloc_r+0x82>
 80058cc:	4629      	mov	r1, r5
 80058ce:	4638      	mov	r0, r7
 80058d0:	f7ff ffc2 	bl	8005858 <sbrk_aligned>
 80058d4:	1c43      	adds	r3, r0, #1
 80058d6:	4604      	mov	r4, r0
 80058d8:	d14d      	bne.n	8005976 <_malloc_r+0xde>
 80058da:	6834      	ldr	r4, [r6, #0]
 80058dc:	4626      	mov	r6, r4
 80058de:	2e00      	cmp	r6, #0
 80058e0:	d140      	bne.n	8005964 <_malloc_r+0xcc>
 80058e2:	6823      	ldr	r3, [r4, #0]
 80058e4:	4631      	mov	r1, r6
 80058e6:	4638      	mov	r0, r7
 80058e8:	eb04 0803 	add.w	r8, r4, r3
 80058ec:	f000 f848 	bl	8005980 <_sbrk_r>
 80058f0:	4580      	cmp	r8, r0
 80058f2:	d13a      	bne.n	800596a <_malloc_r+0xd2>
 80058f4:	6821      	ldr	r1, [r4, #0]
 80058f6:	3503      	adds	r5, #3
 80058f8:	1a6d      	subs	r5, r5, r1
 80058fa:	f025 0503 	bic.w	r5, r5, #3
 80058fe:	3508      	adds	r5, #8
 8005900:	2d0c      	cmp	r5, #12
 8005902:	bf38      	it	cc
 8005904:	250c      	movcc	r5, #12
 8005906:	4629      	mov	r1, r5
 8005908:	4638      	mov	r0, r7
 800590a:	f7ff ffa5 	bl	8005858 <sbrk_aligned>
 800590e:	3001      	adds	r0, #1
 8005910:	d02b      	beq.n	800596a <_malloc_r+0xd2>
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	442b      	add	r3, r5
 8005916:	6023      	str	r3, [r4, #0]
 8005918:	e00e      	b.n	8005938 <_malloc_r+0xa0>
 800591a:	6822      	ldr	r2, [r4, #0]
 800591c:	1b52      	subs	r2, r2, r5
 800591e:	d41e      	bmi.n	800595e <_malloc_r+0xc6>
 8005920:	2a0b      	cmp	r2, #11
 8005922:	d916      	bls.n	8005952 <_malloc_r+0xba>
 8005924:	1961      	adds	r1, r4, r5
 8005926:	42a3      	cmp	r3, r4
 8005928:	6025      	str	r5, [r4, #0]
 800592a:	bf18      	it	ne
 800592c:	6059      	strne	r1, [r3, #4]
 800592e:	6863      	ldr	r3, [r4, #4]
 8005930:	bf08      	it	eq
 8005932:	6031      	streq	r1, [r6, #0]
 8005934:	5162      	str	r2, [r4, r5]
 8005936:	604b      	str	r3, [r1, #4]
 8005938:	4638      	mov	r0, r7
 800593a:	f104 060b 	add.w	r6, r4, #11
 800593e:	f000 f835 	bl	80059ac <__malloc_unlock>
 8005942:	f026 0607 	bic.w	r6, r6, #7
 8005946:	1d23      	adds	r3, r4, #4
 8005948:	1af2      	subs	r2, r6, r3
 800594a:	d0b6      	beq.n	80058ba <_malloc_r+0x22>
 800594c:	1b9b      	subs	r3, r3, r6
 800594e:	50a3      	str	r3, [r4, r2]
 8005950:	e7b3      	b.n	80058ba <_malloc_r+0x22>
 8005952:	6862      	ldr	r2, [r4, #4]
 8005954:	42a3      	cmp	r3, r4
 8005956:	bf0c      	ite	eq
 8005958:	6032      	streq	r2, [r6, #0]
 800595a:	605a      	strne	r2, [r3, #4]
 800595c:	e7ec      	b.n	8005938 <_malloc_r+0xa0>
 800595e:	4623      	mov	r3, r4
 8005960:	6864      	ldr	r4, [r4, #4]
 8005962:	e7b2      	b.n	80058ca <_malloc_r+0x32>
 8005964:	4634      	mov	r4, r6
 8005966:	6876      	ldr	r6, [r6, #4]
 8005968:	e7b9      	b.n	80058de <_malloc_r+0x46>
 800596a:	230c      	movs	r3, #12
 800596c:	603b      	str	r3, [r7, #0]
 800596e:	4638      	mov	r0, r7
 8005970:	f000 f81c 	bl	80059ac <__malloc_unlock>
 8005974:	e7a1      	b.n	80058ba <_malloc_r+0x22>
 8005976:	6025      	str	r5, [r4, #0]
 8005978:	e7de      	b.n	8005938 <_malloc_r+0xa0>
 800597a:	bf00      	nop
 800597c:	20000794 	.word	0x20000794

08005980 <_sbrk_r>:
 8005980:	b538      	push	{r3, r4, r5, lr}
 8005982:	4d06      	ldr	r5, [pc, #24]	; (800599c <_sbrk_r+0x1c>)
 8005984:	2300      	movs	r3, #0
 8005986:	4604      	mov	r4, r0
 8005988:	4608      	mov	r0, r1
 800598a:	602b      	str	r3, [r5, #0]
 800598c:	f7fa ffd0 	bl	8000930 <_sbrk>
 8005990:	1c43      	adds	r3, r0, #1
 8005992:	d102      	bne.n	800599a <_sbrk_r+0x1a>
 8005994:	682b      	ldr	r3, [r5, #0]
 8005996:	b103      	cbz	r3, 800599a <_sbrk_r+0x1a>
 8005998:	6023      	str	r3, [r4, #0]
 800599a:	bd38      	pop	{r3, r4, r5, pc}
 800599c:	2000079c 	.word	0x2000079c

080059a0 <__malloc_lock>:
 80059a0:	4801      	ldr	r0, [pc, #4]	; (80059a8 <__malloc_lock+0x8>)
 80059a2:	f000 b809 	b.w	80059b8 <__retarget_lock_acquire_recursive>
 80059a6:	bf00      	nop
 80059a8:	200007a0 	.word	0x200007a0

080059ac <__malloc_unlock>:
 80059ac:	4801      	ldr	r0, [pc, #4]	; (80059b4 <__malloc_unlock+0x8>)
 80059ae:	f000 b804 	b.w	80059ba <__retarget_lock_release_recursive>
 80059b2:	bf00      	nop
 80059b4:	200007a0 	.word	0x200007a0

080059b8 <__retarget_lock_acquire_recursive>:
 80059b8:	4770      	bx	lr

080059ba <__retarget_lock_release_recursive>:
 80059ba:	4770      	bx	lr

080059bc <_init>:
 80059bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059be:	bf00      	nop
 80059c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059c2:	bc08      	pop	{r3}
 80059c4:	469e      	mov	lr, r3
 80059c6:	4770      	bx	lr

080059c8 <_fini>:
 80059c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ca:	bf00      	nop
 80059cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ce:	bc08      	pop	{r3}
 80059d0:	469e      	mov	lr, r3
 80059d2:	4770      	bx	lr
